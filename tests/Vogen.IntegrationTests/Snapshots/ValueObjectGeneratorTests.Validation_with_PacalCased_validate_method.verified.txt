// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Vogen;

namespace Whatever
{

    public partial struct CustomerId : System.IEquatable<CustomerId>
    {
        private readonly bool _isInitialized;
        
        private readonly int _value;

        public readonly int Value
        {
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        public CustomerId()
        {
            throw new Vogen.ValueObjectValidationException("Validation skipped by attempting to use the default constructor. Please use the 'From' method for construction.");
        }

        private CustomerId(int value) 
        {
            _value = value;
            _isInitialized = true;
        }

        public static CustomerId From(int value)
        {
            CustomerId instance = new CustomerId(value);

            var validation = CustomerId.Validate(value);
            if (validation != Vogen.Validation.Ok)
            {
                throw new Vogen.ValueObjectValidationException(validation.ErrorMessage);
            }


            return instance;
        }

        public readonly bool Equals(CustomerId other)
        {
            EnsureInitialized();
            return System.Collections.Generic.EqualityComparer<int>.Default.Equals(Value, other.Value);
        }

        public readonly bool Equals(int primitive) => Value.Equals(primitive);

        public readonly override bool Equals(object obj)
        {
            return obj is CustomerId && Equals((CustomerId) obj);
        }

        public static bool operator ==(CustomerId left, CustomerId right) => Equals(left, right);
        public static bool operator !=(CustomerId left, CustomerId right) => !(left == right);

        public static bool operator ==(CustomerId left, int right) => Equals(left.Value, right);
        public static bool operator !=(CustomerId left, int right) => !Equals(left.Value, right);

        public static bool operator ==(int left, CustomerId right) => Equals(left, right.Value);
        public static bool operator !=(int left, CustomerId right) => !Equals(left, right.Value);

        public readonly override int GetHashCode() => System.Collections.Generic.EqualityComparer<int>.Default.GetHashCode();

        public readonly override string ToString() => Value.ToString();

        private readonly void EnsureInitialized()
        {
            if(!_isInitialized) throw new ValueObjectValidationException("Use of uninitialized Value Object.");
        }

        
    }
}