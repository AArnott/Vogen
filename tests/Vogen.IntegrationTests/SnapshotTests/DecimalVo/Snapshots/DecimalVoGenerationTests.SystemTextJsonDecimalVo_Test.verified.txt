// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Vogen;

namespace Whatever
{

    [System.Text.Json.Serialization.JsonConverter(typeof(SystemTextJsonDecimalVoSystemTextJsonConverter))]





    public partial struct SystemTextJsonDecimalVo : System.IEquatable<SystemTextJsonDecimalVo>
    {
#if DEBUG    
        private readonly System.Diagnostics.StackTrace _stackTrace = null;
#endif

        private readonly bool _isInitialized;
        
        private readonly decimal _value;

        public readonly decimal Value
        {
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        public SystemTextJsonDecimalVo()
        {
#if DEBUG
            _stackTrace = new System.Diagnostics.StackTrace();
#endif

            _isInitialized = false;
            _value = default;
        }

        private SystemTextJsonDecimalVo(decimal value) 
        {
            _value = value;
            _isInitialized = true;
        }

        public static SystemTextJsonDecimalVo From(decimal value)
        {
            SystemTextJsonDecimalVo instance = new SystemTextJsonDecimalVo(value);

            

            return instance;
        }

        public readonly bool Equals(SystemTextJsonDecimalVo other)
        {
            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;

            return System.Collections.Generic.EqualityComparer<decimal>.Default.Equals(Value, other.Value);
        }

        public readonly bool Equals(decimal primitive) => Value.Equals(primitive);

        public readonly override bool Equals(object obj)
        {
            return obj is SystemTextJsonDecimalVo && Equals((SystemTextJsonDecimalVo) obj);
        }

        public static bool operator ==(SystemTextJsonDecimalVo left, SystemTextJsonDecimalVo right) => Equals(left, right);
        public static bool operator !=(SystemTextJsonDecimalVo left, SystemTextJsonDecimalVo right) => !(left == right);

        public static bool operator ==(SystemTextJsonDecimalVo left, decimal right) => Equals(left.Value, right);
        public static bool operator !=(SystemTextJsonDecimalVo left, decimal right) => !Equals(left.Value, right);

        public static bool operator ==(decimal left, SystemTextJsonDecimalVo right) => Equals(left, right.Value);
        public static bool operator !=(decimal left, SystemTextJsonDecimalVo right) => !Equals(left, right.Value);

        public readonly override int GetHashCode() => System.Collections.Generic.EqualityComparer<decimal>.Default.GetHashCode(_value);

        public readonly override string ToString() => Value.ToString();

        private readonly void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                string message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                string message = "Use of uninitialized Value Object.";
#endif

                throw new ValueObjectValidationException(message);
            }
        }

        
 
        
        class SystemTextJsonDecimalVoSystemTextJsonConverter : System.Text.Json.Serialization.JsonConverter<SystemTextJsonDecimalVo>
        {
            public override SystemTextJsonDecimalVo Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
            {
                return SystemTextJsonDecimalVo.From(reader.GetDecimal());
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, SystemTextJsonDecimalVo value, System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteNumberValue(value.Value);
            }
        }






}
}