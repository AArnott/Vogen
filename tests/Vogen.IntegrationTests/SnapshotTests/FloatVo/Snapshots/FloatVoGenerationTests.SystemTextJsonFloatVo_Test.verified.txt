// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Vogen;

namespace Whatever
{

    [System.Text.Json.Serialization.JsonConverter(typeof(SystemTextJsonFloatVoSystemTextJsonConverter))]





    public partial struct SystemTextJsonFloatVo : System.IEquatable<SystemTextJsonFloatVo>
    {
#if DEBUG    
        private readonly System.Diagnostics.StackTrace _stackTrace = null;
#endif

        private readonly bool _isInitialized;
        
        private readonly float _value;

        public readonly float Value
        {
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        public SystemTextJsonFloatVo()
        {
#if DEBUG
            _stackTrace = new System.Diagnostics.StackTrace();
#endif

            _isInitialized = false;
            _value = default;
        }

        private SystemTextJsonFloatVo(float value) 
        {
            _value = value;
            _isInitialized = true;
        }

        public static SystemTextJsonFloatVo From(float value)
        {
            SystemTextJsonFloatVo instance = new SystemTextJsonFloatVo(value);

            

            return instance;
        }

        public readonly bool Equals(SystemTextJsonFloatVo other)
        {
            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;

            return System.Collections.Generic.EqualityComparer<float>.Default.Equals(Value, other.Value);
        }

        public readonly bool Equals(float primitive) => Value.Equals(primitive);

        public readonly override bool Equals(object obj)
        {
            return obj is SystemTextJsonFloatVo && Equals((SystemTextJsonFloatVo) obj);
        }

        public static bool operator ==(SystemTextJsonFloatVo left, SystemTextJsonFloatVo right) => Equals(left, right);
        public static bool operator !=(SystemTextJsonFloatVo left, SystemTextJsonFloatVo right) => !(left == right);

        public static bool operator ==(SystemTextJsonFloatVo left, float right) => Equals(left.Value, right);
        public static bool operator !=(SystemTextJsonFloatVo left, float right) => !Equals(left.Value, right);

        public static bool operator ==(float left, SystemTextJsonFloatVo right) => Equals(left, right.Value);
        public static bool operator !=(float left, SystemTextJsonFloatVo right) => !Equals(left, right.Value);

        public readonly override int GetHashCode() => System.Collections.Generic.EqualityComparer<float>.Default.GetHashCode(_value);

        public readonly override string ToString() => Value.ToString();

        private readonly void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                string message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                string message = "Use of uninitialized Value Object.";
#endif

                throw new ValueObjectValidationException(message);
            }
        }

        
 
        
        class SystemTextJsonFloatVoSystemTextJsonConverter : System.Text.Json.Serialization.JsonConverter<SystemTextJsonFloatVo>
        {
            public override SystemTextJsonFloatVo Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
            {
                return SystemTextJsonFloatVo.From(reader.GetSingle());
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, SystemTextJsonFloatVo value, System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteNumberValue(value.Value);
            }
        }






}
}