// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Vogen;

namespace Whatever
{

    [System.Text.Json.Serialization.JsonConverter(typeof(MyTimeSpanVoSystemTextJsonConverter))]
[Newtonsoft.Json.JsonConverter(typeof(MyTimeSpanVoNewtonsoftJsonConverter))]

    [System.Diagnostics.DebuggerTypeProxyAttribute(typeof(MyTimeSpanVoDebugView))]
    [System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.TimeSpan, Value = { _value }")]
    public readonly partial struct MyTimeSpanVo : System.IEquatable<MyTimeSpanVo>
    {
#if DEBUG    
        private readonly System.Diagnostics.StackTrace _stackTrace = null;
#endif

        private readonly bool _isInitialized;
        
        private readonly System.TimeSpan _value;

        public readonly System.TimeSpan Value
        {
            [System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [System.Diagnostics.DebuggerStepThroughAttribute]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public MyTimeSpanVo()
        {
#if DEBUG
            _stackTrace = new System.Diagnostics.StackTrace();
#endif

            _isInitialized = false;
            _value = default;
        }

        [System.Diagnostics.DebuggerStepThroughAttribute]
        private MyTimeSpanVo(System.TimeSpan value) 
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static MyTimeSpanVo From(System.TimeSpan value)
        {
            MyTimeSpanVo instance = new MyTimeSpanVo(value);

            

            return instance;
        }

        public readonly bool Equals(MyTimeSpanVo other)
        {
            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;

            return System.Collections.Generic.EqualityComparer<System.TimeSpan>.Default.Equals(Value, other.Value);
        }

        public readonly bool Equals(System.TimeSpan primitive) => Value.Equals(primitive);

        public readonly override bool Equals(object obj)
        {
            return obj is MyTimeSpanVo && Equals((MyTimeSpanVo) obj);
        }

        public static bool operator ==(MyTimeSpanVo left, MyTimeSpanVo right) => Equals(left, right);
        public static bool operator !=(MyTimeSpanVo left, MyTimeSpanVo right) => !(left == right);

        public static bool operator ==(MyTimeSpanVo left, System.TimeSpan right) => Equals(left.Value, right);
        public static bool operator !=(MyTimeSpanVo left, System.TimeSpan right) => !Equals(left.Value, right);

        public static bool operator ==(System.TimeSpan left, MyTimeSpanVo right) => Equals(left, right.Value);
        public static bool operator !=(System.TimeSpan left, MyTimeSpanVo right) => !Equals(left, right.Value);

        public readonly override int GetHashCode() => System.Collections.Generic.EqualityComparer<System.TimeSpan>.Default.GetHashCode(_value);

        public readonly override string ToString() => Value.ToString();

        private readonly void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                string message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                string message = "Use of uninitialized Value Object.";
#endif

                throw new ValueObjectValidationException(message);
            }
        }

        
 
        
        class MyTimeSpanVoSystemTextJsonConverter : System.Text.Json.Serialization.JsonConverter<MyTimeSpanVo>
        {
            public override MyTimeSpanVo Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
            {
                var primitive = System.Text.Json.JsonSerializer.Deserialize<System.TimeSpan>(ref reader, options);
                return new MyTimeSpanVo(primitive);
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, MyTimeSpanVo value, System.Text.Json.JsonSerializerOptions options)
            {
                System.Text.Json.JsonSerializer.Serialize(writer, value.Value);
            }
        }

        class MyTimeSpanVoNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(MyTimeSpanVo);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = ((MyTimeSpanVo)value).Value;
                serializer.Serialize(writer, id);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                return new MyTimeSpanVo(serializer.Deserialize<System.TimeSpan>(reader));
            }
        }


        public class DapperTypeHandler : Dapper.SqlMapper.TypeHandler<MyTimeSpanVo>
        {
            public override void SetValue(System.Data.IDbDataParameter parameter, MyTimeSpanVo value)
            {
                parameter.Value = System.Text.Json.JsonSerializer.Serialize(value.Value);
            }

    public override MyTimeSpanVo Parse(object value)
            {
                return value switch
                {
                    string stringValue =>
                        new MyTimeSpanVo(System.Text.Json.JsonSerializer.Deserialize<Bar>(stringValue)),
                    _ => throw new System.InvalidCastException($"Unable to cast object of type {value.GetType()} to MyTimeSpanVo"),
                };
            }
        }
        
        public class EfCoreValueConverter : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<MyTimeSpanVo, string>
        {
            public EfCoreValueConverter(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints mappingHints = null)
                : base(
                    vo => System.Text.Json.JsonSerializer.Serialize(vo.Value, default(System.Text.Json.JsonSerializerOptions)),
                    text => new MyTimeSpanVo(System.Text.Json.JsonSerializer.Deserialize<System.TimeSpan>(text, default(System.Text.Json.JsonSerializerOptions))),
                    mappingHints
                ) { }
        }


        internal sealed class MyTimeSpanVoDebugView
        {
            private readonly MyTimeSpanVo _t;

            MyTimeSpanVoDebugView(MyTimeSpanVo t)
            {
                _t = t;
            }

            public bool IsInitialized => _t._isInitialized;
            public string UnderlyingType => "System.TimeSpan";
            public string Value => _t._isInitialized ? _t._value.ToString() : "[not initialized]" ;

            #if DEBUG
            public string CreatedWith => _t._stackTrace?.ToString() ?? "the From method";
            #endif

            public string Conversions => @"NewtonsoftJson, SystemTextJson, EfCoreValueConverter, DapperTypeHandler";
                }

}
}