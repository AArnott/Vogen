// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------


using Vogen;

namespace Whatever
{

    [System.Text.Json.Serialization.JsonConverter(typeof(MyIntVoSystemTextJsonConverter))]
[Newtonsoft.Json.JsonConverter(typeof(MyIntVoNewtonsoftJsonConverter))]
[System.ComponentModel.TypeConverter(typeof(MyIntVoTypeConverter))]

    [System.Diagnostics.DebuggerTypeProxyAttribute(typeof(MyIntVoDebugView))]
    [System.Diagnostics.DebuggerDisplayAttribute("Underlying type: int, Value = { _value }")]
    public partial class MyIntVo : System.IEquatable<MyIntVo>
    {
#if DEBUG    
        private readonly System.Diagnostics.StackTrace _stackTrace = null;
#endif
        private readonly bool _isInitialized;
        private readonly int _value;
        
public int Value
        {
            [System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [System.Diagnostics.DebuggerStepThroughAttribute]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public MyIntVo()
        {
#if DEBUG
            _stackTrace = new System.Diagnostics.StackTrace();
#endif
            _isInitialized = false;
            _value = default;
        }

        [System.Diagnostics.DebuggerStepThroughAttribute]
        private MyIntVo(int value)
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static MyIntVo From(int value)
        {
            

            MyIntVo instance = new MyIntVo(value);

            

            return instance;
        }

        public bool Equals(MyIntVo other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;
	    	
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && System.Collections.Generic.EqualityComparer<int>.Default.Equals(Value, other.Value);
        }

        public bool Equals(int primitive) => Value.Equals(primitive);

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MyIntVo) obj);
        }

        public static bool operator ==(MyIntVo left, MyIntVo right) => Equals(left, right);
        public static bool operator !=(MyIntVo left, MyIntVo right) => !Equals(left, right);

        public static bool operator ==(MyIntVo left, int right) => Equals(left.Value, right);
        public static bool operator !=(MyIntVo left, int right) => !Equals(left.Value, right);

        public static bool operator ==(int left, MyIntVo right) => Equals(left, right.Value);
        public static bool operator !=(int left, MyIntVo right) => !Equals(left, right.Value);

        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hash = (int) 2166136261;
                hash = (hash * 16777619) ^ Value.GetHashCode();
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ System.Collections.Generic.EqualityComparer<int>.Default.GetHashCode();
                return hash;
            }
        }

        private void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                string message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                string message = "Use of uninitialized Value Object.";
#endif

                throw new ValueObjectValidationException(message);
            }
        }


        

        public override string ToString() => Value.ToString();

        
        class MyIntVoSystemTextJsonConverter : System.Text.Json.Serialization.JsonConverter<MyIntVo>
        {
            public override MyIntVo Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
            {
                return new MyIntVo(reader.GetInt32());
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, MyIntVo value, System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteNumberValue(value.Value);
            }
        }

        class MyIntVoNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(MyIntVo);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = (MyIntVo)value;
                serializer.Serialize(writer, id.Value);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                var result = serializer.Deserialize<int?>(reader);
                return result.HasValue ? new MyIntVo(result.Value) : null;
            }
        }

        class MyIntVoTypeConverter : System.ComponentModel.TypeConverter
        {
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
            {
                return sourceType == typeof(int) || sourceType == typeof(string) || base.CanConvertFrom(context, sourceType);
            }

            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
                return value switch
                {
                    int intValue => new MyIntVo(intValue),
                    string stringValue when !string.IsNullOrEmpty(stringValue) && int.TryParse(stringValue, out var result) => new MyIntVo(result),
                    _ => base.ConvertFrom(context, culture, value),
                };
            }

            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
            {
                return sourceType == typeof(int) || sourceType == typeof(string) || base.CanConvertTo(context, sourceType);
            }

            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType)
            {
                if (value is MyIntVo idValue)
                {
                    if (destinationType == typeof(int))
                    {
                        return idValue.Value;
                    }

                    if (destinationType == typeof(string))
                    {
                        return idValue.Value.ToString();
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }

        public class DapperTypeHandler : Dapper.SqlMapper.TypeHandler<MyIntVo>
        {
            public override void SetValue(System.Data.IDbDataParameter parameter, MyIntVo value)
            {
                parameter.DbType = System.Data.DbType.Int32;
                parameter.Value = value.Value;
            }

            public override MyIntVo Parse(object value)
            {
                return value switch
                {
                    int intValue => new MyIntVo(intValue),
                    long longValue when longValue < int.MaxValue => new MyIntVo((int)longValue),
                    string stringValue when !string.IsNullOrEmpty(stringValue) && int.TryParse(stringValue, out var result) => new MyIntVo(result),
                    _ => throw new System.InvalidCastException($"Unable to cast object of type {value.GetType()} to MyIntVo"),
                };
            }
        }

        public class EfCoreValueConverter : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<MyIntVo, int>
        {
            public EfCoreValueConverter(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints mappingHints = null)
                : base(
                    vo => vo.Value,
                    value => new MyIntVo(value),
                    mappingHints
                ) { }
        }


        internal sealed class MyIntVoDebugView
        {
            private readonly MyIntVo _t;

            MyIntVoDebugView(MyIntVo t)
            {
                _t = t;
            }

            public string UnderlyingType => "System.Int32";
            public System.Int32 Value => _t.Value ;

            public string Conversions => @"[System.Text.Json.Serialization.JsonConverter(typeof(MyIntVoSystemTextJsonConverter))]
[Newtonsoft.Json.JsonConverter(typeof(MyIntVoNewtonsoftJsonConverter))]
[System.ComponentModel.TypeConverter(typeof(MyIntVoTypeConverter))]
";
                }
    }
}