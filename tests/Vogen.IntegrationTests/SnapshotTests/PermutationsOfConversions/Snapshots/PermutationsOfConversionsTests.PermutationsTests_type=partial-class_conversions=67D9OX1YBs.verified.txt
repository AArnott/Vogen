// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------


using Vogen;

namespace Whatever
{

    
    [System.Diagnostics.DebuggerTypeProxyAttribute(typeof(MyIntVoDebugView))]
    [System.Diagnostics.DebuggerDisplayAttribute("Underlying type: int, Value = { _value }")]
    public partial class MyIntVo : System.IEquatable<MyIntVo>
    {
#if DEBUG    
        private readonly System.Diagnostics.StackTrace _stackTrace = null;
#endif
        private readonly bool _isInitialized;
        private readonly int _value;
        
public int Value
        {
            [System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [System.Diagnostics.DebuggerStepThroughAttribute]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public MyIntVo()
        {
#if DEBUG
            _stackTrace = new System.Diagnostics.StackTrace();
#endif
            _isInitialized = false;
            _value = default;
        }

        [System.Diagnostics.DebuggerStepThroughAttribute]
        private MyIntVo(int value)
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static MyIntVo From(int value)
        {
            

            MyIntVo instance = new MyIntVo(value);

            

            return instance;
        }

        public bool Equals(MyIntVo other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;
	    	
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && System.Collections.Generic.EqualityComparer<int>.Default.Equals(Value, other.Value);
        }

        public bool Equals(int primitive) => Value.Equals(primitive);

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MyIntVo) obj);
        }

        public static bool operator ==(MyIntVo left, MyIntVo right) => Equals(left, right);
        public static bool operator !=(MyIntVo left, MyIntVo right) => !Equals(left, right);

        public static bool operator ==(MyIntVo left, int right) => Equals(left.Value, right);
        public static bool operator !=(MyIntVo left, int right) => !Equals(left.Value, right);

        public static bool operator ==(int left, MyIntVo right) => Equals(left, right.Value);
        public static bool operator !=(int left, MyIntVo right) => !Equals(left, right.Value);

        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hash = (int) 2166136261;
                hash = (hash * 16777619) ^ Value.GetHashCode();
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ System.Collections.Generic.EqualityComparer<int>.Default.GetHashCode();
                return hash;
            }
        }

        private void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                string message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                string message = "Use of uninitialized Value Object.";
#endif

                throw new ValueObjectValidationException(message);
            }
        }


        

        public override string ToString() => Value.ToString();

        






        internal sealed class MyIntVoDebugView
        {
            private readonly MyIntVo _t;

            MyIntVoDebugView(MyIntVo t)
            {
                _t = t;
            }

            public string UnderlyingType => "System.Int32";
            public System.Int32 Value => _t.Value ;

            public string Conversions => @"";
                }
    }
}