// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Vogen;

namespace Whatever
{

    





    public partial struct EfCoreByteVo : System.IEquatable<EfCoreByteVo>
    {
#if DEBUG    
        private readonly System.Diagnostics.StackTrace _stackTrace = null;
#endif

        private readonly bool _isInitialized;
        
        private readonly byte _value;

        public readonly byte Value
        {
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        public EfCoreByteVo()
        {
#if DEBUG
            _stackTrace = new System.Diagnostics.StackTrace();
#endif

            _isInitialized = false;
            _value = default;
        }

        private EfCoreByteVo(byte value) 
        {
            _value = value;
            _isInitialized = true;
        }

        public static EfCoreByteVo From(byte value)
        {
            EfCoreByteVo instance = new EfCoreByteVo(value);

            

            return instance;
        }

        public readonly bool Equals(EfCoreByteVo other)
        {
            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;

            return System.Collections.Generic.EqualityComparer<byte>.Default.Equals(Value, other.Value);
        }

        public readonly bool Equals(byte primitive) => Value.Equals(primitive);

        public readonly override bool Equals(object obj)
        {
            return obj is EfCoreByteVo && Equals((EfCoreByteVo) obj);
        }

        public static bool operator ==(EfCoreByteVo left, EfCoreByteVo right) => Equals(left, right);
        public static bool operator !=(EfCoreByteVo left, EfCoreByteVo right) => !(left == right);

        public static bool operator ==(EfCoreByteVo left, byte right) => Equals(left.Value, right);
        public static bool operator !=(EfCoreByteVo left, byte right) => !Equals(left.Value, right);

        public static bool operator ==(byte left, EfCoreByteVo right) => Equals(left, right.Value);
        public static bool operator !=(byte left, EfCoreByteVo right) => !Equals(left, right.Value);

        public readonly override int GetHashCode() => System.Collections.Generic.EqualityComparer<byte>.Default.GetHashCode(_value);

        public readonly override string ToString() => Value.ToString();

        private readonly void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                string message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                string message = "Use of uninitialized Value Object.";
#endif

                throw new ValueObjectValidationException(message);
            }
        }

        
 
        




        public class EfCoreValueConverter : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<EfCoreByteVo, byte>
        {
            public EfCoreValueConverter(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints mappingHints = null)
                : base(
                    vo => vo.Value,
                    value => new EfCoreByteVo(value),
                    mappingHints
                ) { }
        }


}
}