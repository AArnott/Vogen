// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Vogen;

namespace Whatever
{

    
[Newtonsoft.Json.JsonConverter(typeof(NewtonsoftJsonIntVoNewtonsoftJsonConverter))]




    public partial struct NewtonsoftJsonIntVo : System.IEquatable<NewtonsoftJsonIntVo>
    {
#if DEBUG    
        private readonly System.Diagnostics.StackTrace _stackTrace = null;
#endif

        private readonly bool _isInitialized;
        
        private readonly int _value;

        public readonly int Value
        {
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        public NewtonsoftJsonIntVo()
        {
#if DEBUG
            _stackTrace = new System.Diagnostics.StackTrace();
#endif

            _isInitialized = false;
            _value = default;
        }

        private NewtonsoftJsonIntVo(int value) 
        {
            _value = value;
            _isInitialized = true;
        }

        public static NewtonsoftJsonIntVo From(int value)
        {
            NewtonsoftJsonIntVo instance = new NewtonsoftJsonIntVo(value);

            

            return instance;
        }

        public readonly bool Equals(NewtonsoftJsonIntVo other)
        {
            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;

            return System.Collections.Generic.EqualityComparer<int>.Default.Equals(Value, other.Value);
        }

        public readonly bool Equals(int primitive) => Value.Equals(primitive);

        public readonly override bool Equals(object obj)
        {
            return obj is NewtonsoftJsonIntVo && Equals((NewtonsoftJsonIntVo) obj);
        }

        public static bool operator ==(NewtonsoftJsonIntVo left, NewtonsoftJsonIntVo right) => Equals(left, right);
        public static bool operator !=(NewtonsoftJsonIntVo left, NewtonsoftJsonIntVo right) => !(left == right);

        public static bool operator ==(NewtonsoftJsonIntVo left, int right) => Equals(left.Value, right);
        public static bool operator !=(NewtonsoftJsonIntVo left, int right) => !Equals(left.Value, right);

        public static bool operator ==(int left, NewtonsoftJsonIntVo right) => Equals(left, right.Value);
        public static bool operator !=(int left, NewtonsoftJsonIntVo right) => !Equals(left, right.Value);

        public readonly override int GetHashCode() => System.Collections.Generic.EqualityComparer<int>.Default.GetHashCode(_value);

        public readonly override string ToString() => Value.ToString();

        private readonly void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                string message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                string message = "Use of uninitialized Value Object.";
#endif

                throw new ValueObjectValidationException(message);
            }
        }

        
 
        

        class NewtonsoftJsonIntVoNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(NewtonsoftJsonIntVo);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = (NewtonsoftJsonIntVo)value;
                serializer.Serialize(writer, id.Value);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                var result = serializer.Deserialize<int?>(reader);
                return result.HasValue ? new NewtonsoftJsonIntVo(result.Value) : null;
            }
        }





}
}