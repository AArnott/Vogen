// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Vogen;

namespace Whatever
{

    [System.ComponentModel.TypeConverter(typeof(NoJsonCharVoTypeConverter))]

    [System.Diagnostics.DebuggerTypeProxyAttribute(typeof(NoJsonCharVoDebugView))]
    [System.Diagnostics.DebuggerDisplayAttribute("Underlying type: char, Value = { _value }")]
    public partial struct NoJsonCharVo : System.IEquatable<NoJsonCharVo>
    {
#if DEBUG    
        private readonly System.Diagnostics.StackTrace _stackTrace = null;
#endif

        private readonly bool _isInitialized;
        
        private readonly char _value;

        public readonly char Value
        {
            [System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [System.Diagnostics.DebuggerStepThroughAttribute]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public NoJsonCharVo()
        {
#if DEBUG
            _stackTrace = new System.Diagnostics.StackTrace();
#endif

            _isInitialized = false;
            _value = default;
        }

        [System.Diagnostics.DebuggerStepThroughAttribute]
        private NoJsonCharVo(char value) 
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static NoJsonCharVo From(char value)
        {
            NoJsonCharVo instance = new NoJsonCharVo(value);

            

            return instance;
        }

        public readonly bool Equals(NoJsonCharVo other)
        {
            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;

            return System.Collections.Generic.EqualityComparer<char>.Default.Equals(Value, other.Value);
        }

        public readonly bool Equals(char primitive) => Value.Equals(primitive);

        public readonly override bool Equals(object obj)
        {
            return obj is NoJsonCharVo && Equals((NoJsonCharVo) obj);
        }

        public static bool operator ==(NoJsonCharVo left, NoJsonCharVo right) => Equals(left, right);
        public static bool operator !=(NoJsonCharVo left, NoJsonCharVo right) => !(left == right);

        public static bool operator ==(NoJsonCharVo left, char right) => Equals(left.Value, right);
        public static bool operator !=(NoJsonCharVo left, char right) => !Equals(left.Value, right);

        public static bool operator ==(char left, NoJsonCharVo right) => Equals(left, right.Value);
        public static bool operator !=(char left, NoJsonCharVo right) => !Equals(left, right.Value);

        public readonly override int GetHashCode() => System.Collections.Generic.EqualityComparer<char>.Default.GetHashCode(_value);

        public readonly override string ToString() => Value.ToString();

        private readonly void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                string message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                string message = "Use of uninitialized Value Object.";
#endif

                throw new ValueObjectValidationException(message);
            }
        }

        
 
        


        class NoJsonCharVoTypeConverter : System.ComponentModel.TypeConverter
        {
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
            {
                return sourceType == typeof(char) || sourceType == typeof(string) || base.CanConvertFrom(context, sourceType);
            }

            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
                return value switch
                {
                    char charValue => new NoJsonCharVo(charValue),
                    short shortValue => new NoJsonCharVo((char)shortValue),
                    int intValue => new NoJsonCharVo((char)intValue),
                    long longValue => new NoJsonCharVo((char)longValue),
                    string stringValue when  !string.IsNullOrEmpty(stringValue) && char.TryParse(stringValue, out var result) => new NoJsonCharVo(result),
                    _ => base.ConvertFrom(context, culture, value),
                };
            }

            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
            {
                return sourceType == typeof(char) || sourceType == typeof(string) || base.CanConvertTo(context, sourceType);
            }

            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType)
            {
                if (value is NoJsonCharVo idValue)
                {
                    if (destinationType == typeof(char))
                    {
                        return idValue.Value;
                    }

                    if (destinationType == typeof(string))
                    {
                        return idValue.Value.ToString();
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }





        internal sealed class NoJsonCharVoDebugView
        {
            private readonly NoJsonCharVo _t;

            NoJsonCharVoDebugView(NoJsonCharVo t)
            {
                _t = t;
            }

            public bool IsInitialized => _t._isInitialized;
            public string UnderlyingType => "System.Char";
            public string Value => _t._isInitialized ? _t._value.ToString() : "[not initialized]" ;

            #if DEBUG
            public string CreatedWith => _t._stackTrace?.ToString() ?? "the From method";
            #endif

            public string Conversions => @"TypeConverter";
                }

}
}