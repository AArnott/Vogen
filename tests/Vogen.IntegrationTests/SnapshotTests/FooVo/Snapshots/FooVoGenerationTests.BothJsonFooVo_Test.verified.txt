// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

using Vogen;

namespace Whatever
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(BothJsonFooVoSystemTextJsonConverter))]
[global::Newtonsoft.Json.JsonConverter(typeof(BothJsonFooVoNewtonsoftJsonConverter))]

    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(BothJsonFooVoDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: Whatever.Bar, Value = { _value }")]
    public partial struct BothJsonFooVo : global::System.IEquatable<BothJsonFooVo>
    {
#if DEBUG    
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif

        private readonly global::System.Boolean _isInitialized;
        
        private readonly Whatever.Bar _value;

        public readonly Whatever.Bar Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public BothJsonFooVo()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif

            _isInitialized = false;
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private BothJsonFooVo(Whatever.Bar value) 
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static BothJsonFooVo From(Whatever.Bar value)
        {
            BothJsonFooVo instance = new BothJsonFooVo(value);

            

            return instance;
        }

        public readonly global::System.Boolean Equals(BothJsonFooVo other)
        {
            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;

            return global::System.Collections.Generic.EqualityComparer<Whatever.Bar>.Default.Equals(Value, other.Value);
        }

        public readonly global::System.Boolean Equals(Whatever.Bar primitive) => Value.Equals(primitive);

        public readonly override global::System.Boolean Equals(global::System.Object obj)
        {
            return obj is BothJsonFooVo && Equals((BothJsonFooVo) obj);
        }

        public static global::System.Boolean operator ==(BothJsonFooVo left, BothJsonFooVo right) => Equals(left, right);
        public static global::System.Boolean operator !=(BothJsonFooVo left, BothJsonFooVo right) => !(left == right);

        public static global::System.Boolean operator ==(BothJsonFooVo left, Whatever.Bar right) => Equals(left.Value, right);
        public static global::System.Boolean operator !=(BothJsonFooVo left, Whatever.Bar right) => !Equals(left.Value, right);

        public static global::System.Boolean operator ==(Whatever.Bar left, BothJsonFooVo right) => Equals(left, right.Value);
        public static global::System.Boolean operator !=(Whatever.Bar left, BothJsonFooVo right) => !Equals(left, right.Value);

        public readonly override global::System.Int32 GetHashCode() => global::System.Collections.Generic.EqualityComparer<Whatever.Bar>.Default.GetHashCode(_value);

        public readonly override global::System.String ToString() => Value.ToString();

        private readonly void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif

                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        
 
        
        class BothJsonFooVoSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<BothJsonFooVo>
        {
            public override BothJsonFooVo Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                var primitive = global::System.Text.Json.JsonSerializer.Deserialize<Whatever.Bar>(ref reader, options);
                return new BothJsonFooVo(primitive);
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, BothJsonFooVo value, global::System.Text.Json.JsonSerializerOptions options)
            {
                global::System.Text.Json.JsonSerializer.Serialize(writer, value.Value);
            }
        }

        class BothJsonFooVoNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(BothJsonFooVo);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = ((BothJsonFooVo)value).Value;
                serializer.Serialize(writer, id);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                return new BothJsonFooVo(serializer.Deserialize<Whatever.Bar>(reader));
            }
        }






        internal sealed class BothJsonFooVoDebugView
        {
            private readonly BothJsonFooVo _t;

            BothJsonFooVoDebugView(BothJsonFooVo t)
            {
                _t = t;
            }

            public global::System.Boolean IsInitialized => _t._isInitialized;
            public global::System.String UnderlyingType => "Whatever.Bar";
            public global::System.String Value => _t._isInitialized ? _t._value.ToString() : "[not initialized]" ;

            #if DEBUG
            public global::System.String CreatedWith => _t._stackTrace?.ToString() ?? "the From method";
            #endif

            public global::System.String Conversions => @"NewtonsoftJson, SystemTextJson";
                }

}
}