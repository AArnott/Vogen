// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Vogen;

namespace Whatever
{

    [Newtonsoft.Json.JsonConverter(typeof(NewtonsoftJsonDoubleVoNewtonsoftJsonConverter))]

    [System.Diagnostics.DebuggerTypeProxyAttribute(typeof(NewtonsoftJsonDoubleVoDebugView))]
    [System.Diagnostics.DebuggerDisplayAttribute("Underlying type: double, Value = { _value }")]
    public partial struct NewtonsoftJsonDoubleVo : System.IEquatable<NewtonsoftJsonDoubleVo>
    {
#if DEBUG    
        private readonly System.Diagnostics.StackTrace _stackTrace = null;
#endif

        private readonly bool _isInitialized;
        
        private readonly double _value;

        public readonly double Value
        {
            [System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [System.Diagnostics.DebuggerStepThroughAttribute]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public NewtonsoftJsonDoubleVo()
        {
#if DEBUG
            _stackTrace = new System.Diagnostics.StackTrace();
#endif

            _isInitialized = false;
            _value = default;
        }

        [System.Diagnostics.DebuggerStepThroughAttribute]
        private NewtonsoftJsonDoubleVo(double value) 
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static NewtonsoftJsonDoubleVo From(double value)
        {
            NewtonsoftJsonDoubleVo instance = new NewtonsoftJsonDoubleVo(value);

            

            return instance;
        }

        public readonly bool Equals(NewtonsoftJsonDoubleVo other)
        {
            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;

            return System.Collections.Generic.EqualityComparer<double>.Default.Equals(Value, other.Value);
        }

        public readonly bool Equals(double primitive) => Value.Equals(primitive);

        public readonly override bool Equals(object obj)
        {
            return obj is NewtonsoftJsonDoubleVo && Equals((NewtonsoftJsonDoubleVo) obj);
        }

        public static bool operator ==(NewtonsoftJsonDoubleVo left, NewtonsoftJsonDoubleVo right) => Equals(left, right);
        public static bool operator !=(NewtonsoftJsonDoubleVo left, NewtonsoftJsonDoubleVo right) => !(left == right);

        public static bool operator ==(NewtonsoftJsonDoubleVo left, double right) => Equals(left.Value, right);
        public static bool operator !=(NewtonsoftJsonDoubleVo left, double right) => !Equals(left.Value, right);

        public static bool operator ==(double left, NewtonsoftJsonDoubleVo right) => Equals(left, right.Value);
        public static bool operator !=(double left, NewtonsoftJsonDoubleVo right) => !Equals(left, right.Value);

        public readonly override int GetHashCode() => System.Collections.Generic.EqualityComparer<double>.Default.GetHashCode(_value);

        public readonly override string ToString() => Value.ToString();

        private readonly void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                string message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                string message = "Use of uninitialized Value Object.";
#endif

                throw new ValueObjectValidationException(message);
            }
        }

        
 
        

        class NewtonsoftJsonDoubleVoNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(NewtonsoftJsonDoubleVo);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = (NewtonsoftJsonDoubleVo)value;
                serializer.Serialize(writer, id.Value);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                var result = serializer.Deserialize<int?>(reader);
                return result.HasValue ? NewtonsoftJsonDoubleVo.From(result.Value) : null;
            }
        }





        internal sealed class NewtonsoftJsonDoubleVoDebugView
        {
            private readonly NewtonsoftJsonDoubleVo _t;

            NewtonsoftJsonDoubleVoDebugView(NewtonsoftJsonDoubleVo t)
            {
                _t = t;
            }

            public bool IsInitialized => _t._isInitialized;
            public string UnderlyingType => "System.Double";
            public string Value => _t._isInitialized ? _t._value.ToString() : "[not initialized]" ;

            #if DEBUG
            public string CreatedWith => _t._stackTrace?.ToString() ?? "the From method";
            #endif

            public string Conversions => @"[Newtonsoft.Json.JsonConverter(typeof(NewtonsoftJsonDoubleVoNewtonsoftJsonConverter))]
";
                }

}
}