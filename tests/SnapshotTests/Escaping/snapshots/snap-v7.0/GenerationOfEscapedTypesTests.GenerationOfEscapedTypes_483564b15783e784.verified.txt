[  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669, CS8632

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

namespace generator;

public class VogenTypesFactory : global::System.Text.Json.Serialization.JsonConverterFactory
{
    public VogenTypesFactory() { }
    
    private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>> _lookup = 
        new global::System.Collections.Generic.Dictionary<global::System.Type, global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>> {
                
        };
    
    public override bool CanConvert(global::System.Type typeToConvert) => _lookup.ContainsKey(typeToConvert);
    
    public override global::System.Text.Json.Serialization.JsonConverter CreateConverter(global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options) =>
        _lookup[typeToConvert].Value;
}
  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618
// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036
// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097
// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669, CS8632
// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591
using Vogen;

namespace @class
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::Newtonsoft.Json.JsonConverter(typeof(escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyteNewtonsoftJsonConverter))]
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyteDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.Byte, Value = { _value }")]
    public readonly partial record struct escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte : global::System.IEquatable<escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte>, global::System.IEquatable<System.Byte>, global::System.IComparable<escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte>, global::System.IComparable, global::System.IParsable<escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte>, global::System.ISpanParsable<escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte>
    {
#if DEBUG
private readonly global::System.Diagnostics.StackTrace _stackTrace = null!;
#endif
#if !VOGEN_NO_VALIDATION
        private readonly global::System.Boolean _isInitialized;
#endif
        private readonly System.Byte _value;
        /// <summary>
        /// Gets the underlying <see cref = "System.Byte"/> value if set, otherwise a <see cref = "Vogen.ValueObjectValidationException"/> is thrown.
        /// </summary>
        public readonly System.Byte Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }

            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            init
            {
                _value = value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
#if !VOGEN_NO_VALIDATION
            _isInitialized = false;
#endif
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte(System.Byte value)
        {
            _value = value;
#if !VOGEN_NO_VALIDATION
            _isInitialized = true;
#endif
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte From(System.Byte value)
        {
            escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte instance = new escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte(value);
            return instance;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying type.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, false will be returned.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <param name = "vo">An instance of the value object.</param>
        /// <returns>True if the value object can be built, otherwise false.</returns>
        
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member because of nullability attributes.

        public static bool TryFrom(
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
        System.Byte value,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)]
#endif
 out escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte vo)
#pragma warning restore CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member because of nullability attributes.

        {
            vo = new escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte(value);
            return true;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying value.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, an error will be returned.
        /// </summary>
        /// <param name = "value">The primitive value.</param>
        /// <returns>A <see cref = "ValueObjectOrError{T}"/> containing either the value object, or an error.</returns>
        public static ValueObjectOrError<escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte> TryFrom(System.Byte value)
        {
            return new ValueObjectOrError<escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte>(new escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte(value));
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
#if NETCOREAPP3_0_OR_GREATER
[global:: System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, nameof(_value))]
[global:: System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, nameof(Value))]
#endif
#if VOGEN_NO_VALIDATION
#pragma warning disable CS8775
  public readonly bool IsInitialized() => true;
#pragma warning restore CS8775
#else
        public readonly bool IsInitialized() => _isInitialized;
#endif
        public static explicit operator escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte(System.Byte value) => From(value);
        public static explicit operator System.Byte(escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte value) => value.Value;
        // only called internally when something has been deserialized into
        // its primitive type.
        private static escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte __Deserialize(System.Byte value)
        {
            return new escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte(value);
        }

        public readonly global::System.Boolean Equals(escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte other)
        {
            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if (!IsInitialized() || !other.IsInitialized())
                return false;
            return global::System.Collections.Generic.EqualityComparer<System.Byte>.Default.Equals(Value, other.Value);
        }

        public global::System.Boolean Equals(escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte other, global::System.Collections.Generic.IEqualityComparer<escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte> comparer)
        {
            return comparer.Equals(this, other);
        }

        public readonly global::System.Boolean Equals(System.Byte primitive)
        {
            return Value.Equals(primitive);
        }

        public static global::System.Boolean operator ==(escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte left, System.Byte right) => left.Value.Equals(right);
        public static global::System.Boolean operator ==(System.Byte left, escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte right) => right.Value.Equals(left);
        public static global::System.Boolean operator !=(System.Byte left, escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte right) => !(left == right);
        public static global::System.Boolean operator !=(escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte left, System.Byte right) => !(left == right);
        public int CompareTo(escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte other) => Value.CompareTo(other.Value);
        public int CompareTo(object other)
        {
            if (other is null)
                return 1;
            if (other is escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte x)
                return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte", nameof(other));
        }

        /// <inheritdoc cref = "byte.TryParse(System.ReadOnlySpan{char}, out byte)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte result)
        {
            if (System.Byte.TryParse(s, out var __v))
            {
                result = new escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "byte.TryParse(System.ReadOnlySpan{char}, System.Globalization.NumberStyles, System.IFormatProvider? , out byte)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte result)
        {
            if (System.Byte.TryParse(s, style, provider, out var __v))
            {
                result = new escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "byte.TryParse(System.ReadOnlySpan{char}, System.IFormatProvider? , out byte)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte result)
        {
            if (System.Byte.TryParse(s, provider, out var __v))
            {
                result = new escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "byte.TryParse(string? , out byte)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string s,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte result)
        {
            if (System.Byte.TryParse(s, out var __v))
            {
                result = new escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "byte.TryParse(string? , System.Globalization.NumberStyles, System.IFormatProvider? , out byte)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte result)
        {
            if (System.Byte.TryParse(s, style, provider, out var __v))
            {
                result = new escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "byte.TryParse(string? , System.IFormatProvider? , out byte)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string s, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte result)
        {
            if (System.Byte.TryParse(s, provider, out var __v))
            {
                result = new escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "byte.Parse(System.ReadOnlySpan{char}, System.Globalization.NumberStyles, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte Parse(global::System.ReadOnlySpan<char> s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider)
        {
            var r = System.Byte.Parse(s, style, provider);
            return From(r);
        }

        /// <inheritdoc cref = "byte.Parse(System.ReadOnlySpan{char}, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte Parse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider provider)
        {
            var r = System.Byte.Parse(s, provider);
            return From(r);
        }

        /// <inheritdoc cref = "byte.Parse(string)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte Parse(string s)
        {
            var r = System.Byte.Parse(s);
            return From(r);
        }

        /// <inheritdoc cref = "byte.Parse(string, System.Globalization.NumberStyles)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte Parse(string s, global::System.Globalization.NumberStyles style)
        {
            var r = System.Byte.Parse(s, style);
            return From(r);
        }

        /// <inheritdoc cref = "byte.Parse(string, System.Globalization.NumberStyles, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte Parse(string s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider)
        {
            var r = System.Byte.Parse(s, style, provider);
            return From(r);
        }

        /// <inheritdoc cref = "byte.Parse(string, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte Parse(string s, global::System.IFormatProvider provider)
        {
            var r = System.Byte.Parse(s, provider);
            return From(r);
        }

        public readonly override global::System.Int32 GetHashCode()
        {
            return global::System.Collections.Generic.EqualityComparer<System.Byte>.Default.GetHashCode(Value);
        }

#if NETCOREAPP3_0_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.MemberNotNullAttribute(nameof(_value))]
        [global::System.Diagnostics.CodeAnalysis.MemberNotNullAttribute(nameof(Value))]
#endif
        private readonly void EnsureInitialized()
        {
            if (!IsInitialized())
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif
                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        // record enumerates fields - we just want our Value and to throw if it's not initialized.
        /// <summary>Returns the string representation of the underlying <see cref = "System.Byte"/>.</summary>
        public readonly override global::System.String ToString() => IsInitialized() ? Value.ToString() : "[UNINITIALIZED]";
#nullable disable
        class escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyteNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = (escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte)value;
                serializer.Serialize(writer, id.Value);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                var result = serializer.Deserialize<global::System.Byte?>(reader);
                return result.HasValue ? escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte.__Deserialize(result.Value) : null;
            }
        }

#nullable restore
#nullable disable
        internal sealed class escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyteDebugView
        {
            private readonly escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte _t;
            escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyteDebugView(escapedTestspublic_readonly_partial_record_structConversions_NewtonsoftJsonbyte t)
            {
                _t = t;
            }

            public global::System.Boolean IsInitialized => _t.IsInitialized();
            public global::System.String UnderlyingType => "System.Byte";
            public global::System.String Value => _t.IsInitialized() ? _t._value.ToString() : "[not initialized]";
#if DEBUG
        public global::System.String CreatedWith => _t._stackTrace.ToString() ?? "the From method";
#endif
            public global::System.String Conversions => @"NewtonsoftJson";
        }
#nullable restore
    }
}
]