[  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669, CS8632

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

namespace generator;

public class VogenTypesFactory : global::System.Text.Json.Serialization.JsonConverterFactory
{
    public VogenTypesFactory() { }
    
    private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>> _lookup = 
        new global::System.Collections.Generic.Dictionary<global::System.Type, global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>> {
                { typeof(global::Whatever._casting_public_partial_record_classExplicitNonechar), new global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>(() => new global::Whatever._casting_public_partial_record_classExplicitNonechar._casting_public_partial_record_classExplicitNonecharSystemTextJsonConverter()) }
        };
    
    public override bool CanConvert(global::System.Type typeToConvert) => _lookup.ContainsKey(typeToConvert);
    
    public override global::System.Text.Json.Serialization.JsonConverter CreateConverter(global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options) =>
        _lookup[typeToConvert].Value;
}
  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618
// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036
// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097
// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669, CS8632
// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591
using Vogen;

namespace Whatever
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(_casting_public_partial_record_classExplicitNonecharSystemTextJsonConverter))]
    [global::System.ComponentModel.TypeConverter(typeof(_casting_public_partial_record_classExplicitNonecharTypeConverter))]
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(_casting_public_partial_record_classExplicitNonecharDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.Char, Value = { _value }")]
    public partial record class _casting_public_partial_record_classExplicitNonechar : global::System.IEquatable<_casting_public_partial_record_classExplicitNonechar>, global::System.IEquatable<System.Char>, global::System.IComparable<_casting_public_partial_record_classExplicitNonechar>, global::System.IComparable
    {
#if DEBUG
private readonly global::System.Diagnostics.StackTrace _stackTrace = null!;
#endif
#if !VOGEN_NO_VALIDATION
        private readonly global::System.Boolean _isInitialized;
#endif
        private readonly System.Char _value;
        /// <summary>
        /// Gets the underlying <see cref = "System.Char"/> value if set, otherwise a <see cref = "Vogen.ValueObjectValidationException"/> is thrown.
        /// </summary>
        public System.Char Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }

            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            init
            {
                _value = value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public _casting_public_partial_record_classExplicitNonechar()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
#if !VOGEN_NO_VALIDATION
            _isInitialized = false;
#endif
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private _casting_public_partial_record_classExplicitNonechar(System.Char value)
        {
            _value = value;
#if !VOGEN_NO_VALIDATION
            _isInitialized = true;
#endif
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static _casting_public_partial_record_classExplicitNonechar From(System.Char value)
        {
            _casting_public_partial_record_classExplicitNonechar instance = new _casting_public_partial_record_classExplicitNonechar(value);
            return instance;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying type.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, false will be returned.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <param name = "vo">An instance of the value object.</param>
        /// <returns>True if the value object can be built, otherwise false.</returns>
        
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member because of nullability attributes.

        public static bool TryFrom(
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
        System.Char value,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)]
#endif
 out _casting_public_partial_record_classExplicitNonechar vo)
#pragma warning restore CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member because of nullability attributes.

        {
            vo = new _casting_public_partial_record_classExplicitNonechar(value);
            return true;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying value.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, an error will be returned.
        /// </summary>
        /// <param name = "value">The primitive value.</param>
        /// <returns>A <see cref = "ValueObjectOrError{T}"/> containing either the value object, or an error.</returns>
        public static ValueObjectOrError<_casting_public_partial_record_classExplicitNonechar> TryFrom(System.Char value)
        {
            return new ValueObjectOrError<_casting_public_partial_record_classExplicitNonechar>(new _casting_public_partial_record_classExplicitNonechar(value));
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
#if NETCOREAPP3_0_OR_GREATER
[global:: System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, nameof(_value))]
[global:: System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, nameof(Value))]
#endif
#if VOGEN_NO_VALIDATION
#pragma warning disable CS8775
  public bool IsInitialized() => true;
#pragma warning restore CS8775
#else
        public bool IsInitialized() => _isInitialized;
#endif
        // only called internally when something has been deserialized into
        // its primitive type.
        private static _casting_public_partial_record_classExplicitNonechar __Deserialize(System.Char value)
        {
            return new _casting_public_partial_record_classExplicitNonechar(value);
        }

        public virtual global::System.Boolean Equals(_casting_public_partial_record_classExplicitNonechar other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if (!IsInitialized() || !other.IsInitialized())
                return false;
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<System.Char>.Default.Equals(Value, other.Value);
        }

        public global::System.Boolean Equals(_casting_public_partial_record_classExplicitNonechar other, global::System.Collections.Generic.IEqualityComparer<_casting_public_partial_record_classExplicitNonechar> comparer)
        {
            return comparer.Equals(this, other);
        }

        public global::System.Boolean Equals(System.Char primitive)
        {
            return Value.Equals(primitive);
        }

        public static global::System.Boolean operator ==(_casting_public_partial_record_classExplicitNonechar left, System.Char right) => left.Value.Equals(right);
        public static global::System.Boolean operator ==(System.Char left, _casting_public_partial_record_classExplicitNonechar right) => right.Value.Equals(left);
        public static global::System.Boolean operator !=(System.Char left, _casting_public_partial_record_classExplicitNonechar right) => !(left == right);
        public static global::System.Boolean operator !=(_casting_public_partial_record_classExplicitNonechar left, System.Char right) => !(left == right);
        public static explicit operator _casting_public_partial_record_classExplicitNonechar(System.Char value) => From(value);
        public int CompareTo(_casting_public_partial_record_classExplicitNonechar other)
        {
            if (other is null)
                return 1;
            return Value.CompareTo(other.Value);
        }

        public int CompareTo(object other)
        {
            if (other is null)
                return 1;
            if (other is _casting_public_partial_record_classExplicitNonechar x)
                return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type _casting_public_partial_record_classExplicitNonechar", nameof(other));
        }

        /// <inheritdoc cref = "char.TryParse(string, out char)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string s,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out _casting_public_partial_record_classExplicitNonechar result)
        {
            if (System.Char.TryParse(s, out var __v))
            {
                result = new _casting_public_partial_record_classExplicitNonechar(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "char.Parse(string)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static _casting_public_partial_record_classExplicitNonechar Parse(string s)
        {
            var r = System.Char.Parse(s);
            return From(r);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32)2166136261;
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<System.Char>.Default.GetHashCode(Value);
                return hash;
            }
        }

#if NETCOREAPP3_0_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.MemberNotNullAttribute(nameof(_value))]
        [global::System.Diagnostics.CodeAnalysis.MemberNotNullAttribute(nameof(Value))]
#endif
        private void EnsureInitialized()
        {
            if (!IsInitialized())
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif
                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        // record enumerates fields - we just want our Value and to throw if it's not initialized.
        /// <summary>Returns the string representation of the underlying <see cref = "System.Char"/>.</summary>
        public override global::System.String ToString() => IsInitialized() ? Value.ToString() : "[UNINITIALIZED]";
#nullable disable
        /// <summary>
        /// Converts a _casting_public_partial_record_classExplicitNonechar to or from JSON.
        /// </summary>
        public class _casting_public_partial_record_classExplicitNonecharSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<_casting_public_partial_record_classExplicitNonechar>
        {
            public override _casting_public_partial_record_classExplicitNonechar Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                var s = reader.GetString();
                return _casting_public_partial_record_classExplicitNonechar.__Deserialize(s[0]);
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, _casting_public_partial_record_classExplicitNonechar value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteStringValue(value.Value.ToString());
            }
#if NET6_0_OR_GREATER
            public override _casting_public_partial_record_classExplicitNonechar ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                var s = reader.GetString();

                return _casting_public_partial_record_classExplicitNonechar.__Deserialize(s[0]);
            }

            public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, _casting_public_partial_record_classExplicitNonechar value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WritePropertyName(value.Value.ToString());
            }
#endif
        }

#nullable restore
#nullable disable
        class _casting_public_partial_record_classExplicitNonecharTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Char) || sourceType == typeof(global::System.String) || base.CanConvertFrom(context, sourceType);
            }

            public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value)
            {
                return value switch
                {
                    global::System.Char charValue => _casting_public_partial_record_classExplicitNonechar.__Deserialize(charValue),
                    global::System.Int16 shortValue => _casting_public_partial_record_classExplicitNonechar.__Deserialize((global::System.Char)shortValue),
                    global::System.Int32 intValue => _casting_public_partial_record_classExplicitNonechar.__Deserialize((global::System.Char)intValue),
                    global::System.Int64 longValue => _casting_public_partial_record_classExplicitNonechar.__Deserialize((global::System.Char)longValue),
                    global::System.String stringValue when !global::System.String.IsNullOrEmpty(stringValue) && global::System.Char.TryParse(stringValue, out var result) => _casting_public_partial_record_classExplicitNonechar.__Deserialize(result),
                    _ => base.ConvertFrom(context, culture, value),
                };
            }

            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Char) || sourceType == typeof(global::System.String) || base.CanConvertTo(context, sourceType);
            }

            public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, global::System.Type destinationType)
            {
                if (value is _casting_public_partial_record_classExplicitNonechar idValue)
                {
                    if (destinationType == typeof(global::System.Char))
                    {
                        return idValue.Value;
                    }

                    if (destinationType == typeof(global::System.String))
                    {
                        return idValue.Value.ToString();
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }

#nullable restore
        internal sealed class _casting_public_partial_record_classExplicitNonecharDebugView
        {
            private readonly _casting_public_partial_record_classExplicitNonechar _t;
            _casting_public_partial_record_classExplicitNonecharDebugView(_casting_public_partial_record_classExplicitNonechar t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.Char";
            public System.Char Value => _t.Value;
            public global::System.String Conversions => @"[global::System.Text.Json.Serialization.JsonConverter(typeof(_casting_public_partial_record_classExplicitNonecharSystemTextJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(_casting_public_partial_record_classExplicitNonecharTypeConverter))]
";
        }
    }
}
]