[  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

namespace generator;

public class VogenTypesFactory : global::System.Text.Json.Serialization.JsonConverterFactory
{
    public VogenTypesFactory() { }
    private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>> _lookup = 
        new global::System.Collections.Generic.Dictionary<global::System.Type, global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>> {
                { typeof(Whatever.stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset), new global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>(() => new Whatever.stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset.stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffsetSystemTextJsonConverter()) }
        };
    
    public override bool CanConvert(global::System.Type typeToConvert) => _lookup.ContainsKey(typeToConvert);
    
    public override global::System.Text.Json.Serialization.JsonConverter CreateConverter(global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options) =>
        _lookup[typeToConvert].Value;
}
  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

using Vogen;

namespace Whatever
{

    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] 
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffsetSystemTextJsonConverter))]

    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffsetDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.DateTimeOffset, Value = { _value }")]
    public readonly partial struct stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset : global::System.IEquatable<stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset>, global::System.IEquatable<System.DateTimeOffset> ,  global::System.IComparable<stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset>, global::System.IComparable,  global::System.IParsable<stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset>,  global::System.ISpanParsable<stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset>
    {
#if DEBUG   
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif

        private readonly global::System.Boolean _isInitialized;
        
        private readonly System.DateTimeOffset _value;

        /// <summary>
        /// Gets the underlying <see cref="System.DateTimeOffset" /> value if set, otherwise a <see cref="ValueObjectValidationException" /> is thrown.
        /// </summary>
        public readonly System.DateTimeOffset Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }


        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif

            _isInitialized = false;
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset(System.DateTimeOffset value) 
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset From(System.DateTimeOffset value)
        {
            

            

            stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset instance = new stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset(value);

            return instance;
        }

        /// <summary>
/// Tries to build an instance from the provided underlying type.
/// If a normalization method is provided, it will be called.
/// If validation is provided, and it fails, false will be returned.
/// </summary>
/// <param name="value">The underlying type.</param>
/// <param name="vo">An instance of the value object.</param>
/// <returns>True if the value object can be built, otherwise false.</returns>
public static bool TryFrom(System.DateTimeOffset value, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset vo)
{
    
    

    

    vo = new stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset(value);

    return true;
}/// <summary>
/// Tries to build an instance from the provided underlying value.
/// If a normalization method is provided, it will be called.
/// If validation is provided, and it fails, an error will be returned.
/// </summary>
/// <param name="value">The primitive value.</param>
/// <returns>A <see cref="ValueObjectOrError{T}"/> containing either the value object, or an error.</returns>
public static ValueObjectOrError<stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset> TryFrom(System.DateTimeOffset value)
{
    

    

    

    return new ValueObjectOrError<stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset>(new stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset(value));
}

        public bool IsInitialized() => _isInitialized;

        

        public static explicit operator stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset(System.DateTimeOffset value) => From(value);
        public static explicit operator System.DateTimeOffset(stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset value) => value.Value;

        // only called internally when something has been deserialized into
        // its primitive type.
        private static stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset __Deserialize(System.DateTimeOffset value)
        {
            

            

            return new stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset(value);
        }
                  public readonly global::System.Boolean Equals(stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset other)
          {
            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;

            return global::System.Collections.Generic.EqualityComparer<System.DateTimeOffset>.Default.Equals(Value, other.Value);
          }
          public global::System.Boolean Equals(stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset other, global::System.Collections.Generic.IEqualityComparer<stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset> comparer)
          {
            return comparer.Equals(this, other);
          }

          
            public readonly global::System.Boolean Equals(System.DateTimeOffset primitive)
            {
              return Value.Equals(primitive);
            }

          public readonly override global::System.Boolean Equals(global::System.Object obj)
          {
            return obj is stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset && Equals((stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset) obj);
          }

        public static global::System.Boolean operator ==(stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset left, stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset right) => Equals(left, right);
        public static global::System.Boolean operator !=(stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset left, stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset right) => !(left == right);

        public static global::System.Boolean operator ==(stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset left, System.DateTimeOffset right) => Equals(left.Value, right);
        public static global::System.Boolean operator !=(stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset left, System.DateTimeOffset right) => !Equals(left.Value, right);

        public static global::System.Boolean operator ==(System.DateTimeOffset left, stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset right) => Equals(left, right.Value);
        public static global::System.Boolean operator !=(System.DateTimeOffset left, stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset right) => !Equals(left, right.Value);

        public int CompareTo(stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset other) => Value.CompareTo(other.Value);
        public int CompareTo(object other) {
            if(other is null) return 1;
            if(other is stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset x) return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset", nameof(other));
        }

        
    /// <inheritdoc cref="System.DateTimeOffset.TryParse(System.ReadOnlySpan{char}, out System.DateTimeOffset)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
    /// </returns>
    public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> input, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset result) {
        if(System.DateTimeOffset.TryParse(input, out var __v)) {
            
            
            result = new stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset(__v);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="System.DateTimeOffset.TryParse(System.ReadOnlySpan{char}, System.IFormatProvider?, out System.DateTimeOffset)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
    /// </returns>
    public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset result) {
        if(System.DateTimeOffset.TryParse(s, provider, out var __v)) {
            
            
            result = new stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset(__v);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="System.DateTimeOffset.TryParse(System.ReadOnlySpan{char}, System.IFormatProvider?, System.Globalization.DateTimeStyles, out System.DateTimeOffset)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
    /// </returns>
    public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> input, global::System.IFormatProvider formatProvider, global::System.Globalization.DateTimeStyles styles, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset result) {
        if(System.DateTimeOffset.TryParse(input, formatProvider, styles, out var __v)) {
            
            
            result = new stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset(__v);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="System.DateTimeOffset.TryParse(string?, out System.DateTimeOffset)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
    /// </returns>
    public static global::System.Boolean TryParse(string input, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset result) {
        if(System.DateTimeOffset.TryParse(input, out var __v)) {
            
            
            result = new stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset(__v);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="System.DateTimeOffset.TryParse(string?, System.IFormatProvider?, out System.DateTimeOffset)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
    /// </returns>
    public static global::System.Boolean TryParse(string s, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset result) {
        if(System.DateTimeOffset.TryParse(s, provider, out var __v)) {
            
            
            result = new stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset(__v);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="System.DateTimeOffset.TryParse(string?, System.IFormatProvider?, System.Globalization.DateTimeStyles, out System.DateTimeOffset)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
    /// </returns>
    public static global::System.Boolean TryParse(string input, global::System.IFormatProvider formatProvider, global::System.Globalization.DateTimeStyles styles, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset result) {
        if(System.DateTimeOffset.TryParse(input, formatProvider, styles, out var __v)) {
            
            
            result = new stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset(__v);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="System.DateTimeOffset.Parse(System.ReadOnlySpan{char}, System.IFormatProvider?)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created by calling the Parse method on the primitive.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset Parse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider provider) {
        var r = System.DateTimeOffset.Parse(s, provider);
        return From(r);
    }

    /// <inheritdoc cref="System.DateTimeOffset.Parse(System.ReadOnlySpan{char}, System.IFormatProvider?, System.Globalization.DateTimeStyles)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created by calling the Parse method on the primitive.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset Parse(global::System.ReadOnlySpan<char> input, global::System.IFormatProvider formatProvider, global::System.Globalization.DateTimeStyles styles) {
        var r = System.DateTimeOffset.Parse(input, formatProvider, styles);
        return From(r);
    }

    /// <inheritdoc cref="System.DateTimeOffset.Parse(string)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created by calling the Parse method on the primitive.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset Parse(string input) {
        var r = System.DateTimeOffset.Parse(input);
        return From(r);
    }

    /// <inheritdoc cref="System.DateTimeOffset.Parse(string, System.IFormatProvider?)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created by calling the Parse method on the primitive.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset Parse(string input, global::System.IFormatProvider formatProvider) {
        var r = System.DateTimeOffset.Parse(input, formatProvider);
        return From(r);
    }

    /// <inheritdoc cref="System.DateTimeOffset.Parse(string, System.IFormatProvider?, System.Globalization.DateTimeStyles)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created by calling the Parse method on the primitive.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset Parse(string input, global::System.IFormatProvider formatProvider, global::System.Globalization.DateTimeStyles styles) {
        var r = System.DateTimeOffset.Parse(input, formatProvider, styles);
        return From(r);
    }

        
        
          public readonly override global::System.Int32 GetHashCode()
          {
            return global::System.Collections.Generic.EqualityComparer<System.DateTimeOffset>.Default.GetHashCode(Value);
          }

        /// <summary>Returns the string representation of the underlying <see cref="System.DateTimeOffset" />.</summary>
    public readonly override global::System.String ToString() =>_isInitialized ? Value.ToString() : "[UNINITIALIZED]";

        private readonly void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif

                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        
 
        
        /// <summary>
        /// Converts a stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset to or from JSON.
        /// </summary>
        public class stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffsetSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset>
        {
            public override stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset.__Deserialize(reader.GetDateTimeOffset());
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteStringValue(value.Value);
            }

#if NET6_0_OR_GREATER
            public override stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset.__Deserialize(global::System.DateTimeOffset.ParseExact(reader.GetString(), "O", global::System.Globalization.CultureInfo.InvariantCulture));
            }

            public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WritePropertyName(value.Value.ToString("O"));
            }
#endif            
        }







        
            internal sealed class stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffsetDebugView
            {
                private readonly stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset _t;

                stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffsetDebugView(stj_number_as_string_public_readonly_partial_structConversions_SystemTextJsonSystem_DateTimeOffset t)
                {
                    _t = t;
                }

                public global::System.Boolean IsInitialized => _t._isInitialized;
                public global::System.String UnderlyingType => "System.DateTimeOffset";
                public global::System.String Value => _t._isInitialized ? _t._value.ToString() : "[not initialized]" ;

                #if DEBUG
                    public global::System.String CreatedWith => _t._stackTrace?.ToString() ?? "the From method";
                #endif

                public global::System.String Conversions => @"SystemTextJson";
            }

}

}
]