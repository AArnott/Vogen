// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

using Vogen;

namespace Whatever
{

    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] 
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::Newtonsoft.Json.JsonConverter(typeof(stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloatNewtonsoftJsonConverter))]

    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloatDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.Single, Value = { _value }")]
    public partial record struct stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat : global::System.IEquatable<stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat>, global::System.IEquatable<System.Single>,  global::System.IComparable<stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat>, global::System.IComparable
    {
#if DEBUG   
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif

        private readonly global::System.Boolean _isInitialized;
        
        private readonly System.Single _value;

        /// <summary>
        /// Gets the underlying <see cref="System.Single" /> value if set, otherwise a <see cref="ValueObjectValidationException" /> is thrown.
        /// </summary>
        public readonly System.Single Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            init
            {
                

                

                

                _value = value;
            }
        }


        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif

            _isInitialized = false;
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat(System.Single value) 
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat From(System.Single value)
        {
            

            

            stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat instance = new stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat(value);

            return instance;
        }

        /// <summary>
/// Tries to build an instance from the provided underlying type.
/// If a normalization method is provided, it will be called.
/// If validation is provided, and it fails, false will be returned.
/// </summary>
/// <param name="value">The underlying type.</param>
/// <param name="vo">An instance of the value object.</param>
/// <returns>True if the value object can be built, otherwise false.</returns>
public static bool TryFrom(System.Single value, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat vo)
{
    
    

    

    vo = new stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat(value);

    return true;
}/// <summary>
/// Tries to build an instance from the provided underlying value.
/// If a normalization method is provided, it will be called.
/// If validation is provided, and it fails, an error will be returned.
/// </summary>
/// <param name="value">The primitive value.</param>
/// <returns>A <see cref="ValueObjectOrError{T}"/> containing either the value object, or an error.</returns>
public static ValueObjectOrError<stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat> TryFrom(System.Single value)
{
    

    

    

    return new ValueObjectOrError<stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat>(new stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat(value));
}

        public bool IsInitialized() => _isInitialized;

        
        public static explicit operator stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat(System.Single value) => From(value);
        public static explicit operator System.Single(stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat value) => value.Value;

        // only called internally when something has been deserialized into
        // its primitive type.
        private static stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat __Deserialize(System.Single value)
        {
            

            

            return new stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat(value);
        }
                  public readonly global::System.Boolean Equals(stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat other)
          {
            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;

            return global::System.Collections.Generic.EqualityComparer<System.Single>.Default.Equals(Value, other.Value);
          }
          public global::System.Boolean Equals(stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat other, global::System.Collections.Generic.IEqualityComparer<stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat> comparer)
          {
            return comparer.Equals(this, other);
          }

          
            public readonly global::System.Boolean Equals(System.Single primitive)
            {
              return Value.Equals(primitive);
            }


        public static global::System.Boolean operator ==(stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat left, System.Single right) => Equals(left.Value, right);
        public static global::System.Boolean operator !=(stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat left, System.Single right) => !Equals(left.Value, right);

        public static global::System.Boolean operator ==(System.Single left, stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat right) => Equals(left, right.Value);
        public static global::System.Boolean operator !=(System.Single left, stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat right) => !Equals(left, right.Value);

        public int CompareTo(stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat other) => Value.CompareTo(other.Value);
        public int CompareTo(object other) {
            if(other is null) return 1;
            if(other is stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat x) return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat", nameof(other));
        }

        
    /// <inheritdoc cref="float.TryParse(string, System.Globalization.NumberStyles, System.IFormatProvider, out float)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
    /// </returns>
    public static global::System.Boolean TryParse(string s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat result) {
        if(System.Single.TryParse(s, style, provider, out var __v)) {
            
            
            result = new stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat(__v);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="float.TryParse(string, out float)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
    /// </returns>
    public static global::System.Boolean TryParse(string s, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat result) {
        if(System.Single.TryParse(s, out var __v)) {
            
            
            result = new stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat(__v);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="float.Parse(string)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat Parse(string s) {
        var r = System.Single.Parse(s);
        return From(r);
    }

    /// <inheritdoc cref="float.Parse(string, System.Globalization.NumberStyles)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat Parse(string s, global::System.Globalization.NumberStyles style) {
        var r = System.Single.Parse(s, style);
        return From(r);
    }

    /// <inheritdoc cref="float.Parse(string, System.Globalization.NumberStyles, System.IFormatProvider)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat Parse(string s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider) {
        var r = System.Single.Parse(s, style, provider);
        return From(r);
    }

    /// <inheritdoc cref="float.Parse(string, System.IFormatProvider)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat Parse(string s, global::System.IFormatProvider provider) {
        var r = System.Single.Parse(s, provider);
        return From(r);
    }


        
          public readonly override global::System.Int32 GetHashCode()
          {
            return global::System.Collections.Generic.EqualityComparer<System.Single>.Default.GetHashCode(Value);
          }

        private readonly void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif

                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        // record enumerates fields - we just want our Value and to throw if it's not initialized.
        /// <summary>Returns the string representation of the underlying type</summary>
    /// <inheritdoc cref="System.Single.ToString()" />
    public readonly override global::System.String ToString() =>_isInitialized ? Value.ToString() : "[UNINITIALIZED]";

        
 
        

        class stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloatNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = (stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat)value;
                serializer.Serialize(writer, id.Value);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                var result = serializer.Deserialize<global::System.Single?>(reader);
                return result.HasValue ? stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat.__Deserialize(result.Value) : null;
            }
        }






        
            internal sealed class stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloatDebugView
            {
                private readonly stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat _t;

                stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloatDebugView(stj_number_as_string_public_partial_record_structConversions_NewtonsoftJsonfloat t)
                {
                    _t = t;
                }

                public global::System.Boolean IsInitialized => _t._isInitialized;
                public global::System.String UnderlyingType => "System.Single";
                public global::System.String Value => _t._isInitialized ? _t._value.ToString() : "[not initialized]" ;

                #if DEBUG
                    public global::System.String CreatedWith => _t._stackTrace?.ToString() ?? "the From method";
                #endif

                public global::System.String Conversions => @"NewtonsoftJson";
            }

}

}