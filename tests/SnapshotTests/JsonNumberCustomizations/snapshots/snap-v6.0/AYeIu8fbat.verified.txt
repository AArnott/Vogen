// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

using Vogen;

namespace Whatever
{

    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] 
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::Newtonsoft.Json.JsonConverter(typeof(stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customizedNewtonsoftJsonConverter))]

    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customizedDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.DateTimeOffset, Value = { _value }")]
    public readonly partial struct stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized : global::System.IEquatable<stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized>, global::System.IEquatable<System.DateTimeOffset> ,  global::System.IComparable<stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized>, global::System.IComparable
    {
#if DEBUG    
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif

        private readonly global::System.Boolean _isInitialized;
        
        private readonly System.DateTimeOffset _value;

        /// <summary>
        /// Gets the underlying <see cref="System.DateTimeOffset" /> value if set, otherwise a <see cref="ValueObjectValidationException" /> is thrown.
        /// </summary>
        public readonly System.DateTimeOffset Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif

            _isInitialized = false;
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized(System.DateTimeOffset value) 
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized From(System.DateTimeOffset value)
        {
            

            

            stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized instance = new stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized(value);

            return instance;
        }
        

        public static explicit operator stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized(System.DateTimeOffset value) => From(value);
        public static explicit operator System.DateTimeOffset(stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized value) => value.Value;

        // only called internally when something has been deserialized into
        // its primitive type.
        private static stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized Deserialize(System.DateTimeOffset value)
        {
            

            

            return new stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized(value);
        }
        
public readonly global::System.Boolean Equals(stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized other)
{
    // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
    // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
    if(!_isInitialized || !other._isInitialized) return false;

    return global::System.Collections.Generic.EqualityComparer<System.DateTimeOffset>.Default.Equals(Value, other.Value);
}

public global::System.Boolean Equals(stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized other, global::System.Collections.Generic.IEqualityComparer<stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized> comparer)
{
    return comparer.Equals(this, other);
}

  public readonly global::System.Boolean Equals(System.DateTimeOffset primitive) {
    return Value.Equals(primitive);
 }
public readonly override global::System.Boolean Equals(global::System.Object obj)
{
    return obj is stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized && Equals((stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized) obj);
}

        public static global::System.Boolean operator ==(stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized left, stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized right) => Equals(left, right);
        public static global::System.Boolean operator !=(stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized left, stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized right) => !(left == right);

        public static global::System.Boolean operator ==(stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized left, System.DateTimeOffset right) => Equals(left.Value, right);
        public static global::System.Boolean operator !=(stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized left, System.DateTimeOffset right) => !Equals(left.Value, right);

        public static global::System.Boolean operator ==(System.DateTimeOffset left, stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized right) => Equals(left, right.Value);
        public static global::System.Boolean operator !=(System.DateTimeOffset left, stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized right) => !Equals(left, right.Value);

        public int CompareTo(stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized other) => Value.CompareTo(other.Value);
        public int CompareTo(object other) {
            if(other == null) return 1;
            if(other is stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized x) return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized", nameof(other));
        }

        
    /// <inheritdoc cref="System.DateTimeOffset.TryParse(System.ReadOnlySpan{char}, out System.DateTimeOffset)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> input, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized result) {
        if(System.DateTimeOffset.TryParse(input, out var r)) {
            result = From(r);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="System.DateTimeOffset.TryParse(System.ReadOnlySpan{char}, System.IFormatProvider?, System.Globalization.DateTimeStyles, out System.DateTimeOffset)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> input, global::System.IFormatProvider formatProvider, global::System.Globalization.DateTimeStyles styles, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized result) {
        if(System.DateTimeOffset.TryParse(input, formatProvider, styles, out var r)) {
            result = From(r);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="System.DateTimeOffset.TryParse(string?, out System.DateTimeOffset)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static global::System.Boolean TryParse(string input, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized result) {
        if(System.DateTimeOffset.TryParse(input, out var r)) {
            result = From(r);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="System.DateTimeOffset.TryParse(string?, System.IFormatProvider?, System.Globalization.DateTimeStyles, out System.DateTimeOffset)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static global::System.Boolean TryParse(string input, global::System.IFormatProvider formatProvider, global::System.Globalization.DateTimeStyles styles, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized result) {
        if(System.DateTimeOffset.TryParse(input, formatProvider, styles, out var r)) {
            result = From(r);
            return true;
        }

        result = default;
        return false;
    }

    public readonly override global::System.Int32 GetHashCode()
    {
        return global::System.Collections.Generic.EqualityComparer<System.DateTimeOffset>.Default.GetHashCode(Value);
    }

        /// <summary>Returns the string representation of the underlying type</summary>
    /// <inheritdoc cref="System.DateTimeOffset.ToString()" />
    public readonly override global::System.String ToString() =>_isInitialized ? Value.ToString() : "[UNINITIALIZED]";

        private readonly void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif

                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        
 
        

        class stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customizedNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = (stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized)value;
                serializer.Serialize(writer, id.Value);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                var dt = serializer.Deserialize<global::System.DateTimeOffset?>(reader);
                return dt.HasValue ? stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized.Deserialize(dt.Value) : null;
            }
        }






        internal sealed class stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customizedDebugView
        {
            private readonly stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized _t;

            stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customizedDebugView(stj_number_as_string_public_readonly_partial_structConversions_NewtonsoftJsonSystem_DateTimeOffset_customized t)
            {
                _t = t;
            }

            public global::System.Boolean IsInitialized => _t._isInitialized;
            public global::System.String UnderlyingType => "System.DateTimeOffset";
            public global::System.String Value => _t._isInitialized ? _t._value.ToString() : "[not initialized]" ;

            #if DEBUG
            public global::System.String CreatedWith => _t._stackTrace?.ToString() ?? "the From method";
            #endif

            public global::System.String Conversions => @"NewtonsoftJson";
                }

}
}