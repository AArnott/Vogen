[  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

public static class VogenSwashbuckleExtensions
{
    public static global::Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions MapVogenTypes(this global::Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions o)
    {
        global::Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.MapType<MyNamespace.MyVo>(o, () => new global::Microsoft.OpenApi.Models.OpenApiSchema { Type = "string" });


        return o;
    }
}
  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

namespace generator;

public class VogenTypesFactory : global::System.Text.Json.Serialization.JsonConverterFactory
{
    public VogenTypesFactory() { }
    
    private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>> _lookup = 
        new global::System.Collections.Generic.Dictionary<global::System.Type, global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>> {
                { typeof(global::MyNamespace.MyVo), new global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>(() => new global::MyNamespace.MyVo.MyVoSystemTextJsonConverter()) }
        };
    
    public override bool CanConvert(global::System.Type typeToConvert) => _lookup.ContainsKey(typeToConvert);
    
    public override global::System.Text.Json.Serialization.JsonConverter CreateConverter(global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options) =>
        _lookup[typeToConvert].Value;
}
  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618
// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036
// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097
// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669
// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591
using Vogen;

namespace MyNamespace
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(MyVoSystemTextJsonConverter))]
    [global::System.ComponentModel.TypeConverter(typeof(MyVoTypeConverter))]
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(MyVoDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: MyNamespace.C, Value = { _value }")]
    public partial class MyVo : global::System.IEquatable<MyVo>, global::System.IEquatable<MyNamespace.C>, global::System.IParsable<MyVo>
    {
#if DEBUG
private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
#if !VOGEN_NO_VALIDATION
        private readonly global::System.Boolean _isInitialized;
#endif
        private readonly MyNamespace.C _value;
        /// <summary>
        /// Gets the underlying <see cref = "MyNamespace.C"/> value if set, otherwise a <see cref = "global::Vogen.ValueObjectValidationException"/> is thrown.
        /// </summary>
        public MyNamespace.C Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public MyVo()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
#if !VOGEN_NO_VALIDATION
            _isInitialized = false;
#endif
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private MyVo(MyNamespace.C value)
        {
            _value = value;
#if !VOGEN_NO_VALIDATION
            _isInitialized = true;
#endif
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static MyVo From(MyNamespace.C value)
        {
            if (value is null)
            {
                throw new global::Vogen.ValueObjectValidationException("Cannot create a value object with null.");
            }

            MyVo instance = new MyVo(value);
            return instance;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying type.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, false will be returned.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <param name = "vo">An instance of the value object.</param>
        /// <returns>True if the value object can be built, otherwise false.</returns>
        public static bool TryFrom(MyNamespace.C value,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVo vo)
        {
            if (value is null)
            {
                vo = default;
                return false;
            }

            vo = new MyVo(value);
            return true;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying value.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, an error will be returned.
        /// </summary>
        /// <param name = "value">The primitive value.</param>
        /// <returns>A <see cref = "ValueObjectOrError{T}"/> containing either the value object, or an error.</returns>
        public static ValueObjectOrError<MyVo> TryFrom(MyNamespace.C value)
        {
            if (value is null)
            {
                return new ValueObjectOrError<MyVo>(Validation.Invalid("The value provided was null"));
            }

            return new ValueObjectOrError<MyVo>(new MyVo(value));
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
#if VOGEN_NO_VALIDATION
  public bool IsInitialized() => true;
#else
        public bool IsInitialized() => _isInitialized;
#endif
        // only called internally when something has been deserialized into
        // its primitive type.
        private static MyVo __Deserialize(MyNamespace.C value)
        {
            if (value is null)
            {
                throw new global::Vogen.ValueObjectValidationException("Cannot create a value object with null.");
            }

            return new MyVo(value);
        }

        public global::System.Boolean Equals(MyVo other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if (!IsInitialized() || !other.IsInitialized())
                return false;
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<MyNamespace.C>.Default.Equals(Value, other.Value);
        }

        public global::System.Boolean Equals(MyVo other, global::System.Collections.Generic.IEqualityComparer<MyVo> comparer)
        {
            return comparer.Equals(this, other);
        }

        public global::System.Boolean Equals(MyNamespace.C primitive)
        {
            return Value.Equals(primitive);
        }

        public override global::System.Boolean Equals(global::System.Object obj)
        {
            return Equals(obj as MyVo);
        }

        public static global::System.Boolean operator ==(MyVo left, MyVo right) => Equals(left, right);
        public static global::System.Boolean operator !=(MyVo left, MyVo right) => !Equals(left, right);
        public static global::System.Boolean operator ==(MyVo left, MyNamespace.C right) => left?.Value.Equals(right) ?? false;
        public static global::System.Boolean operator !=(MyVo left, MyNamespace.C right) => !(left == right);
        public static global::System.Boolean operator ==(MyNamespace.C left, MyVo right) => right?.Value.Equals(left) ?? false;
        public static global::System.Boolean operator !=(MyNamespace.C left, MyVo right) => !(left == right);
        public static explicit operator MyVo(MyNamespace.C value) => From(value);
        public static explicit operator MyNamespace.C(MyVo value) => value.Value;
        /// <inheritdoc cref = "MyNamespace.C.TryParse(string? , System.IFormatProvider? , out MyNamespace.C)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string s, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVo result)
        {
            if (MyNamespace.C.TryParse(s, provider, out var __v))
            {
                result = new MyVo(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "MyNamespace.C.Parse(string, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVo Parse(string s, global::System.IFormatProvider provider)
        {
            var r = MyNamespace.C.Parse(s, provider);
            return From(r);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32)2166136261;
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<MyNamespace.C>.Default.GetHashCode(Value);
                return hash;
            }
        }

        private void EnsureInitialized()
        {
            if (!IsInitialized())
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif
                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        /// <summary>Returns the string representation of the underlying <see cref = "MyNamespace.C"/>.</summary>
        public override global::System.String ToString() => IsInitialized() ? Value.ToString() : "[UNINITIALIZED]";
        /// <summary>
        /// Converts a MyVo to or from JSON.
        /// </summary>
        public class MyVoSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<MyVo>
        {
            public override MyVo Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                var primitive = global::System.Text.Json.JsonSerializer.Deserialize<MyNamespace.C>(ref reader, options);
                return MyVo.__Deserialize(primitive);
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, MyVo value, global::System.Text.Json.JsonSerializerOptions options)
            {
                global::System.Text.Json.JsonSerializer.Serialize(writer, value.Value, options);
            }
#if NET6_0_OR_GREATER
            public override MyVo ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                var primitive = global::System.Text.Json.JsonSerializer.Deserialize<MyNamespace.C>(ref reader, options);
                return MyVo.__Deserialize(primitive);
            }

            public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, MyVo value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WritePropertyName(global::System.Text.Json.JsonSerializer.Serialize(value.Value));
            }
#endif
        }

        class MyVoTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(MyNamespace.C);
            }

            public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value)
            {
                MyNamespace.C ut = (MyNamespace.C)value;
                return MyVo.__Deserialize(ut);
            }

            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(MyNamespace.C);
            }

            public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, global::System.Type destinationType)
            {
                if (value is MyVo idValue)
                {
                    return idValue.Value;
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }

        internal sealed class MyVoDebugView
        {
            private readonly MyVo _t;
            MyVoDebugView(MyVo t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "MyNamespace.C";
            public MyNamespace.C Value => _t.Value;
            public global::System.String Conversions => @"[global::System.Text.Json.Serialization.JsonConverter(typeof(MyVoSystemTextJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(MyVoTypeConverter))]
";
        }
    }
}
]