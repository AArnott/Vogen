[  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

public static class VogenSwashbuckleExtensions
{
    public static global::Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions MapVogenTypes(this global::Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions o)
    {
        global::Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.MapType<@double.MyVoInt>(o, () => new global::Microsoft.OpenApi.Models.OpenApiSchema { Type = "integer" });
global::Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.MapType<@double.MyVoFloat>(o, () => new global::Microsoft.OpenApi.Models.OpenApiSchema { Type = "number" });
global::Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.MapType<@double.MyVoDecimal>(o, () => new global::Microsoft.OpenApi.Models.OpenApiSchema { Type = "number" });
global::Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.MapType<@double.MyVoDouble>(o, () => new global::Microsoft.OpenApi.Models.OpenApiSchema { Type = "number" });
global::Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.MapType<@double.MyVoString>(o, () => new global::Microsoft.OpenApi.Models.OpenApiSchema { Type = "string" });
global::Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.MapType<@double.MyVoBool>(o, () => new global::Microsoft.OpenApi.Models.OpenApiSchema { Type = "boolean" });
global::Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.MapType<@double.@bool>(o, () => new global::Microsoft.OpenApi.Models.OpenApiSchema { Type = "boolean" });


        return o;
    }
}
  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

namespace generator;

public class VogenTypesFactory : global::System.Text.Json.Serialization.JsonConverterFactory
{
    public VogenTypesFactory() { }
    
    private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>> _lookup = 
        new global::System.Collections.Generic.Dictionary<global::System.Type, global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>> {
                { typeof(global::@double.MyVoInt), new global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>(() => new global::@double.MyVoInt.MyVoIntSystemTextJsonConverter()) },{ typeof(global::@double.MyVoFloat), new global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>(() => new global::@double.MyVoFloat.MyVoFloatSystemTextJsonConverter()) },{ typeof(global::@double.MyVoDecimal), new global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>(() => new global::@double.MyVoDecimal.MyVoDecimalSystemTextJsonConverter()) },{ typeof(global::@double.MyVoDouble), new global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>(() => new global::@double.MyVoDouble.MyVoDoubleSystemTextJsonConverter()) },{ typeof(global::@double.MyVoString), new global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>(() => new global::@double.MyVoString.MyVoStringSystemTextJsonConverter()) },{ typeof(global::@double.MyVoBool), new global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>(() => new global::@double.MyVoBool.MyVoBoolSystemTextJsonConverter()) },{ typeof(global::@double.@bool), new global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>(() => new global::@double.@bool.@boolSystemTextJsonConverter()) }
        };
    
    public override bool CanConvert(global::System.Type typeToConvert) => _lookup.ContainsKey(typeToConvert);
    
    public override global::System.Text.Json.Serialization.JsonConverter CreateConverter(global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options) =>
        _lookup[typeToConvert].Value;
}
  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618
// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036
// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097
// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669
// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591
using Vogen;

namespace @double
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(MyVoIntSystemTextJsonConverter))]
    [global::System.ComponentModel.TypeConverter(typeof(MyVoIntTypeConverter))]
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(MyVoIntDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.Int32, Value = { _value }")]
    public partial class MyVoInt : global::System.IEquatable<MyVoInt>, global::System.IEquatable<System.Int32>, global::System.IComparable<MyVoInt>, global::System.IComparable, global::System.IParsable<MyVoInt>, global::System.ISpanParsable<MyVoInt>, global::System.IUtf8SpanParsable<MyVoInt>
    {
#if DEBUG
private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
#if !VOGEN_NO_VALIDATION
        private readonly global::System.Boolean _isInitialized;
#endif
        private readonly System.Int32 _value;
        /// <summary>
        /// Gets the underlying <see cref = "System.Int32"/> value if set, otherwise a <see cref = "global::Vogen.ValueObjectValidationException"/> is thrown.
        /// </summary>
        public System.Int32 Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public MyVoInt()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
#if !VOGEN_NO_VALIDATION
            _isInitialized = false;
#endif
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private MyVoInt(System.Int32 value)
        {
            _value = value;
#if !VOGEN_NO_VALIDATION
            _isInitialized = true;
#endif
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static MyVoInt From(System.Int32 value)
        {
            MyVoInt instance = new MyVoInt(value);
            return instance;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying type.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, false will be returned.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <param name = "vo">An instance of the value object.</param>
        /// <returns>True if the value object can be built, otherwise false.</returns>
        public static bool TryFrom(System.Int32 value,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoInt vo)
        {
            vo = new MyVoInt(value);
            return true;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying value.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, an error will be returned.
        /// </summary>
        /// <param name = "value">The primitive value.</param>
        /// <returns>A <see cref = "ValueObjectOrError{T}"/> containing either the value object, or an error.</returns>
        public static ValueObjectOrError<MyVoInt> TryFrom(System.Int32 value)
        {
            return new ValueObjectOrError<MyVoInt>(new MyVoInt(value));
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
#if VOGEN_NO_VALIDATION
  public bool IsInitialized() => true;
#else
        public bool IsInitialized() => _isInitialized;
#endif
        // only called internally when something has been deserialized into
        // its primitive type.
        private static MyVoInt __Deserialize(System.Int32 value)
        {
            return new MyVoInt(value);
        }

        public global::System.Boolean Equals(MyVoInt other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if (!IsInitialized() || !other.IsInitialized())
                return false;
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<System.Int32>.Default.Equals(Value, other.Value);
        }

        public global::System.Boolean Equals(MyVoInt other, global::System.Collections.Generic.IEqualityComparer<MyVoInt> comparer)
        {
            return comparer.Equals(this, other);
        }

        public global::System.Boolean Equals(System.Int32 primitive)
        {
            return Value.Equals(primitive);
        }

        public override global::System.Boolean Equals(global::System.Object obj)
        {
            return Equals(obj as MyVoInt);
        }

        public static global::System.Boolean operator ==(MyVoInt left, MyVoInt right) => Equals(left, right);
        public static global::System.Boolean operator !=(MyVoInt left, MyVoInt right) => !Equals(left, right);
        public static global::System.Boolean operator ==(MyVoInt left, System.Int32 right) => left?.Value.Equals(right) ?? false;
        public static global::System.Boolean operator !=(MyVoInt left, System.Int32 right) => !(left == right);
        public static global::System.Boolean operator ==(System.Int32 left, MyVoInt right) => right?.Value.Equals(left) ?? false;
        public static global::System.Boolean operator !=(System.Int32 left, MyVoInt right) => !(left == right);
        public static explicit operator MyVoInt(System.Int32 value) => From(value);
        public static explicit operator System.Int32(MyVoInt value) => value.Value;
        public int CompareTo(MyVoInt other) => Value.CompareTo(other.Value);
        public int CompareTo(object other)
        {
            if (other is null)
                return 1;
            if (other is MyVoInt x)
                return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type MyVoInt", nameof(other));
        }

        /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{byte}, System.Globalization.NumberStyles, System.IFormatProvider? , out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoInt result)
        {
            if (System.Int32.TryParse(utf8Text, style, provider, out var __v))
            {
                result = new MyVoInt(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{byte}, System.IFormatProvider? , out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoInt result)
        {
            if (System.Int32.TryParse(utf8Text, provider, out var __v))
            {
                result = new MyVoInt(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{byte}, out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoInt result)
        {
            if (System.Int32.TryParse(utf8Text, out var __v))
            {
                result = new MyVoInt(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{char}, System.Globalization.NumberStyles, System.IFormatProvider? , out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoInt result)
        {
            if (System.Int32.TryParse(s, style, provider, out var __v))
            {
                result = new MyVoInt(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{char}, System.IFormatProvider? , out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoInt result)
        {
            if (System.Int32.TryParse(s, provider, out var __v))
            {
                result = new MyVoInt(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{char}, out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoInt result)
        {
            if (System.Int32.TryParse(s, out var __v))
            {
                result = new MyVoInt(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "int.TryParse(string? , System.Globalization.NumberStyles, System.IFormatProvider? , out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoInt result)
        {
            if (System.Int32.TryParse(s, style, provider, out var __v))
            {
                result = new MyVoInt(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "int.TryParse(string? , System.IFormatProvider? , out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string s, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoInt result)
        {
            if (System.Int32.TryParse(s, provider, out var __v))
            {
                result = new MyVoInt(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "int.TryParse(string? , out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string s,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoInt result)
        {
            if (System.Int32.TryParse(s, out var __v))
            {
                result = new MyVoInt(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "int.Parse(System.ReadOnlySpan{byte}, System.Globalization.NumberStyles, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoInt Parse(global::System.ReadOnlySpan<byte> utf8Text, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider)
        {
            var r = System.Int32.Parse(utf8Text, style, provider);
            return From(r);
        }

        /// <inheritdoc cref = "int.Parse(System.ReadOnlySpan{byte}, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoInt Parse(global::System.ReadOnlySpan<byte> utf8Text, global::System.IFormatProvider provider)
        {
            var r = System.Int32.Parse(utf8Text, provider);
            return From(r);
        }

        /// <inheritdoc cref = "int.Parse(System.ReadOnlySpan{char}, System.Globalization.NumberStyles, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoInt Parse(global::System.ReadOnlySpan<char> s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider)
        {
            var r = System.Int32.Parse(s, style, provider);
            return From(r);
        }

        /// <inheritdoc cref = "int.Parse(System.ReadOnlySpan{char}, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoInt Parse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider provider)
        {
            var r = System.Int32.Parse(s, provider);
            return From(r);
        }

        /// <inheritdoc cref = "int.Parse(string)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoInt Parse(string s)
        {
            var r = System.Int32.Parse(s);
            return From(r);
        }

        /// <inheritdoc cref = "int.Parse(string, System.Globalization.NumberStyles)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoInt Parse(string s, global::System.Globalization.NumberStyles style)
        {
            var r = System.Int32.Parse(s, style);
            return From(r);
        }

        /// <inheritdoc cref = "int.Parse(string, System.Globalization.NumberStyles, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoInt Parse(string s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider)
        {
            var r = System.Int32.Parse(s, style, provider);
            return From(r);
        }

        /// <inheritdoc cref = "int.Parse(string, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoInt Parse(string s, global::System.IFormatProvider provider)
        {
            var r = System.Int32.Parse(s, provider);
            return From(r);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32)2166136261;
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<System.Int32>.Default.GetHashCode(Value);
                return hash;
            }
        }

        private void EnsureInitialized()
        {
            if (!IsInitialized())
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif
                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        /// <summary>Returns the string representation of the underlying <see cref = "System.Int32"/>.</summary>
        public override global::System.String ToString() => IsInitialized() ? Value.ToString() : "[UNINITIALIZED]";
        /// <summary>
        /// Converts a MyVoInt to or from JSON.
        /// </summary>
        public class MyVoIntSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<MyVoInt>
        {
            public override MyVoInt Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
#if NET5_0_OR_GREATER
                return MyVoInt.__Deserialize(global::System.Text.Json.JsonSerializer.Deserialize(ref reader, (global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::System.Int32>)options.GetTypeInfo(typeof(global::System.Int32))));
#else
                return MyVoInt.__Deserialize(reader.GetInt32());
#endif
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, MyVoInt value, global::System.Text.Json.JsonSerializerOptions options)
            {
#if NET5_0_OR_GREATER
                global::System.Text.Json.JsonSerializer.Serialize(writer, value.Value, options);
#else
                writer.WriteNumberValue(value.Value);
#endif
            }
#if NET6_0_OR_GREATER
            public override MyVoInt ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return MyVoInt.__Deserialize(global::System.Int32.Parse(reader.GetString(), global::System.Globalization.NumberStyles.Any, global::System.Globalization.CultureInfo.InvariantCulture));
            }

            public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, MyVoInt value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WritePropertyName(value.Value.ToString(global::System.Globalization.CultureInfo.InvariantCulture));
            }
#endif
        }

        class MyVoIntTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Int32) || sourceType == typeof(global::System.String) || base.CanConvertFrom(context, sourceType);
            }

            public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value)
            {
                return value switch
                {
                    global::System.Int32 intValue => MyVoInt.__Deserialize(intValue),
                    global::System.String stringValue when !global::System.String.IsNullOrEmpty(stringValue) && global::System.Int32.TryParse(stringValue, out var result) => MyVoInt.__Deserialize(result),
                    _ => base.ConvertFrom(context, culture, value),
                };
            }

            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Int32) || sourceType == typeof(global::System.String) || base.CanConvertTo(context, sourceType);
            }

            public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, global::System.Type destinationType)
            {
                if (value is MyVoInt idValue)
                {
                    if (destinationType == typeof(global::System.Int32))
                    {
                        return idValue.Value;
                    }

                    if (destinationType == typeof(global::System.String))
                    {
                        return idValue.Value.ToString();
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }

        internal sealed class MyVoIntDebugView
        {
            private readonly MyVoInt _t;
            MyVoIntDebugView(MyVoInt t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.Int32";
            public System.Int32 Value => _t.Value;
            public global::System.String Conversions => @"[global::System.Text.Json.Serialization.JsonConverter(typeof(MyVoIntSystemTextJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(MyVoIntTypeConverter))]
";
        }
    }
}
  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618
// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036
// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097
// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669
// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591
using Vogen;

namespace @double
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(MyVoFloatSystemTextJsonConverter))]
    [global::System.ComponentModel.TypeConverter(typeof(MyVoFloatTypeConverter))]
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(MyVoFloatDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.Single, Value = { _value }")]
    public partial class MyVoFloat : global::System.IEquatable<MyVoFloat>, global::System.IEquatable<System.Single>, global::System.IComparable<MyVoFloat>, global::System.IComparable, global::System.IParsable<MyVoFloat>, global::System.ISpanParsable<MyVoFloat>, global::System.IUtf8SpanParsable<MyVoFloat>
    {
#if DEBUG
private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
#if !VOGEN_NO_VALIDATION
        private readonly global::System.Boolean _isInitialized;
#endif
        private readonly System.Single _value;
        /// <summary>
        /// Gets the underlying <see cref = "System.Single"/> value if set, otherwise a <see cref = "global::Vogen.ValueObjectValidationException"/> is thrown.
        /// </summary>
        public System.Single Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public MyVoFloat()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
#if !VOGEN_NO_VALIDATION
            _isInitialized = false;
#endif
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private MyVoFloat(System.Single value)
        {
            _value = value;
#if !VOGEN_NO_VALIDATION
            _isInitialized = true;
#endif
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static MyVoFloat From(System.Single value)
        {
            MyVoFloat instance = new MyVoFloat(value);
            return instance;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying type.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, false will be returned.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <param name = "vo">An instance of the value object.</param>
        /// <returns>True if the value object can be built, otherwise false.</returns>
        public static bool TryFrom(System.Single value,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoFloat vo)
        {
            vo = new MyVoFloat(value);
            return true;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying value.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, an error will be returned.
        /// </summary>
        /// <param name = "value">The primitive value.</param>
        /// <returns>A <see cref = "ValueObjectOrError{T}"/> containing either the value object, or an error.</returns>
        public static ValueObjectOrError<MyVoFloat> TryFrom(System.Single value)
        {
            return new ValueObjectOrError<MyVoFloat>(new MyVoFloat(value));
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
#if VOGEN_NO_VALIDATION
  public bool IsInitialized() => true;
#else
        public bool IsInitialized() => _isInitialized;
#endif
        // only called internally when something has been deserialized into
        // its primitive type.
        private static MyVoFloat __Deserialize(System.Single value)
        {
            return new MyVoFloat(value);
        }

        public global::System.Boolean Equals(MyVoFloat other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if (!IsInitialized() || !other.IsInitialized())
                return false;
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<System.Single>.Default.Equals(Value, other.Value);
        }

        public global::System.Boolean Equals(MyVoFloat other, global::System.Collections.Generic.IEqualityComparer<MyVoFloat> comparer)
        {
            return comparer.Equals(this, other);
        }

        public global::System.Boolean Equals(System.Single primitive)
        {
            return Value.Equals(primitive);
        }

        public override global::System.Boolean Equals(global::System.Object obj)
        {
            return Equals(obj as MyVoFloat);
        }

        public static global::System.Boolean operator ==(MyVoFloat left, MyVoFloat right) => Equals(left, right);
        public static global::System.Boolean operator !=(MyVoFloat left, MyVoFloat right) => !Equals(left, right);
        public static global::System.Boolean operator ==(MyVoFloat left, System.Single right) => left?.Value.Equals(right) ?? false;
        public static global::System.Boolean operator !=(MyVoFloat left, System.Single right) => !(left == right);
        public static global::System.Boolean operator ==(System.Single left, MyVoFloat right) => right?.Value.Equals(left) ?? false;
        public static global::System.Boolean operator !=(System.Single left, MyVoFloat right) => !(left == right);
        public static explicit operator MyVoFloat(System.Single value) => From(value);
        public static explicit operator System.Single(MyVoFloat value) => value.Value;
        public int CompareTo(MyVoFloat other) => Value.CompareTo(other.Value);
        public int CompareTo(object other)
        {
            if (other is null)
                return 1;
            if (other is MyVoFloat x)
                return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type MyVoFloat", nameof(other));
        }

        /// <inheritdoc cref = "float.TryParse(System.ReadOnlySpan{byte}, System.Globalization.NumberStyles, System.IFormatProvider? , out float)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoFloat result)
        {
            if (System.Single.TryParse(utf8Text, style, provider, out var __v))
            {
                result = new MyVoFloat(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "float.TryParse(System.ReadOnlySpan{byte}, System.IFormatProvider? , out float)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoFloat result)
        {
            if (System.Single.TryParse(utf8Text, provider, out var __v))
            {
                result = new MyVoFloat(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "float.TryParse(System.ReadOnlySpan{byte}, out float)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoFloat result)
        {
            if (System.Single.TryParse(utf8Text, out var __v))
            {
                result = new MyVoFloat(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "float.TryParse(System.ReadOnlySpan{char}, System.Globalization.NumberStyles, System.IFormatProvider? , out float)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoFloat result)
        {
            if (System.Single.TryParse(s, style, provider, out var __v))
            {
                result = new MyVoFloat(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "float.TryParse(System.ReadOnlySpan{char}, System.IFormatProvider? , out float)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoFloat result)
        {
            if (System.Single.TryParse(s, provider, out var __v))
            {
                result = new MyVoFloat(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "float.TryParse(System.ReadOnlySpan{char}, out float)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoFloat result)
        {
            if (System.Single.TryParse(s, out var __v))
            {
                result = new MyVoFloat(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "float.TryParse(string? , System.Globalization.NumberStyles, System.IFormatProvider? , out float)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoFloat result)
        {
            if (System.Single.TryParse(s, style, provider, out var __v))
            {
                result = new MyVoFloat(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "float.TryParse(string? , System.IFormatProvider? , out float)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string s, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoFloat result)
        {
            if (System.Single.TryParse(s, provider, out var __v))
            {
                result = new MyVoFloat(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "float.TryParse(string? , out float)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string s,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoFloat result)
        {
            if (System.Single.TryParse(s, out var __v))
            {
                result = new MyVoFloat(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "float.Parse(System.ReadOnlySpan{byte}, System.Globalization.NumberStyles, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoFloat Parse(global::System.ReadOnlySpan<byte> utf8Text, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider)
        {
            var r = System.Single.Parse(utf8Text, style, provider);
            return From(r);
        }

        /// <inheritdoc cref = "float.Parse(System.ReadOnlySpan{byte}, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoFloat Parse(global::System.ReadOnlySpan<byte> utf8Text, global::System.IFormatProvider provider)
        {
            var r = System.Single.Parse(utf8Text, provider);
            return From(r);
        }

        /// <inheritdoc cref = "float.Parse(System.ReadOnlySpan{char}, System.Globalization.NumberStyles, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoFloat Parse(global::System.ReadOnlySpan<char> s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider)
        {
            var r = System.Single.Parse(s, style, provider);
            return From(r);
        }

        /// <inheritdoc cref = "float.Parse(System.ReadOnlySpan{char}, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoFloat Parse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider provider)
        {
            var r = System.Single.Parse(s, provider);
            return From(r);
        }

        /// <inheritdoc cref = "float.Parse(string)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoFloat Parse(string s)
        {
            var r = System.Single.Parse(s);
            return From(r);
        }

        /// <inheritdoc cref = "float.Parse(string, System.Globalization.NumberStyles)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoFloat Parse(string s, global::System.Globalization.NumberStyles style)
        {
            var r = System.Single.Parse(s, style);
            return From(r);
        }

        /// <inheritdoc cref = "float.Parse(string, System.Globalization.NumberStyles, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoFloat Parse(string s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider)
        {
            var r = System.Single.Parse(s, style, provider);
            return From(r);
        }

        /// <inheritdoc cref = "float.Parse(string, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoFloat Parse(string s, global::System.IFormatProvider provider)
        {
            var r = System.Single.Parse(s, provider);
            return From(r);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32)2166136261;
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<System.Single>.Default.GetHashCode(Value);
                return hash;
            }
        }

        private void EnsureInitialized()
        {
            if (!IsInitialized())
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif
                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        /// <summary>Returns the string representation of the underlying <see cref = "System.Single"/>.</summary>
        public override global::System.String ToString() => IsInitialized() ? Value.ToString() : "[UNINITIALIZED]";
        /// <summary>
        /// Converts a MyVoFloat to or from JSON.
        /// </summary>
        public class MyVoFloatSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<MyVoFloat>
        {
            public override MyVoFloat Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
#if NET5_0_OR_GREATER
                return MyVoFloat.__Deserialize(global::System.Text.Json.JsonSerializer.Deserialize(ref reader, (global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::System.Single>)options.GetTypeInfo(typeof(global::System.Single))));
#else
                return MyVoFloat.__Deserialize(reader.GetSingle());
#endif
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, MyVoFloat value, global::System.Text.Json.JsonSerializerOptions options)
            {
#if NET5_0_OR_GREATER
                global::System.Text.Json.JsonSerializer.Serialize(writer, value.Value, options);
#else
                writer.WriteNumberValue(value.Value);
#endif
            }
#if NET6_0_OR_GREATER
            public override MyVoFloat ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return MyVoFloat.__Deserialize(global::System.Single.Parse(reader.GetString(), global::System.Globalization.NumberStyles.Any, global::System.Globalization.CultureInfo.InvariantCulture));
            }

            public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, MyVoFloat value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WritePropertyName(value.Value.ToString(global::System.Globalization.CultureInfo.InvariantCulture));
            }
#endif
        }

        class MyVoFloatTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Single) || sourceType == typeof(global::System.String) || base.CanConvertFrom(context, sourceType);
            }

            public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value)
            {
                return value switch
                {
                    global::System.Single floatValue => MyVoFloat.__Deserialize(floatValue),
                    global::System.String stringValue when !global::System.String.IsNullOrEmpty(stringValue) && global::System.Single.TryParse(stringValue, global::System.Globalization.NumberStyles.Float | global::System.Globalization.NumberStyles.AllowThousands, culture.NumberFormat, out var result) => MyVoFloat.__Deserialize(result),
                    _ => base.ConvertFrom(context, culture, value),
                };
            }

            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Single) || sourceType == typeof(global::System.String) || base.CanConvertTo(context, sourceType);
            }

            public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, global::System.Type destinationType)
            {
                if (value is MyVoFloat idValue)
                {
                    if (destinationType == typeof(global::System.Single))
                    {
                        return idValue.Value;
                    }

                    if (destinationType == typeof(global::System.String))
                    {
                        return idValue.Value.ToString(culture);
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }

        internal sealed class MyVoFloatDebugView
        {
            private readonly MyVoFloat _t;
            MyVoFloatDebugView(MyVoFloat t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.Single";
            public System.Single Value => _t.Value;
            public global::System.String Conversions => @"[global::System.Text.Json.Serialization.JsonConverter(typeof(MyVoFloatSystemTextJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(MyVoFloatTypeConverter))]
";
        }
    }
}
  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618
// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036
// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097
// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669
// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591
using Vogen;

namespace @double
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(MyVoDecimalSystemTextJsonConverter))]
    [global::System.ComponentModel.TypeConverter(typeof(MyVoDecimalTypeConverter))]
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(MyVoDecimalDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.Decimal, Value = { _value }")]
    public partial class MyVoDecimal : global::System.IEquatable<MyVoDecimal>, global::System.IEquatable<System.Decimal>, global::System.IComparable<MyVoDecimal>, global::System.IComparable, global::System.IParsable<MyVoDecimal>, global::System.ISpanParsable<MyVoDecimal>, global::System.IUtf8SpanParsable<MyVoDecimal>
    {
#if DEBUG
private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
#if !VOGEN_NO_VALIDATION
        private readonly global::System.Boolean _isInitialized;
#endif
        private readonly System.Decimal _value;
        /// <summary>
        /// Gets the underlying <see cref = "System.Decimal"/> value if set, otherwise a <see cref = "global::Vogen.ValueObjectValidationException"/> is thrown.
        /// </summary>
        public System.Decimal Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public MyVoDecimal()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
#if !VOGEN_NO_VALIDATION
            _isInitialized = false;
#endif
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private MyVoDecimal(System.Decimal value)
        {
            _value = value;
#if !VOGEN_NO_VALIDATION
            _isInitialized = true;
#endif
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static MyVoDecimal From(System.Decimal value)
        {
            MyVoDecimal instance = new MyVoDecimal(value);
            return instance;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying type.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, false will be returned.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <param name = "vo">An instance of the value object.</param>
        /// <returns>True if the value object can be built, otherwise false.</returns>
        public static bool TryFrom(System.Decimal value,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDecimal vo)
        {
            vo = new MyVoDecimal(value);
            return true;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying value.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, an error will be returned.
        /// </summary>
        /// <param name = "value">The primitive value.</param>
        /// <returns>A <see cref = "ValueObjectOrError{T}"/> containing either the value object, or an error.</returns>
        public static ValueObjectOrError<MyVoDecimal> TryFrom(System.Decimal value)
        {
            return new ValueObjectOrError<MyVoDecimal>(new MyVoDecimal(value));
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
#if VOGEN_NO_VALIDATION
  public bool IsInitialized() => true;
#else
        public bool IsInitialized() => _isInitialized;
#endif
        // only called internally when something has been deserialized into
        // its primitive type.
        private static MyVoDecimal __Deserialize(System.Decimal value)
        {
            return new MyVoDecimal(value);
        }

        public global::System.Boolean Equals(MyVoDecimal other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if (!IsInitialized() || !other.IsInitialized())
                return false;
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<System.Decimal>.Default.Equals(Value, other.Value);
        }

        public global::System.Boolean Equals(MyVoDecimal other, global::System.Collections.Generic.IEqualityComparer<MyVoDecimal> comparer)
        {
            return comparer.Equals(this, other);
        }

        public global::System.Boolean Equals(System.Decimal primitive)
        {
            return Value.Equals(primitive);
        }

        public override global::System.Boolean Equals(global::System.Object obj)
        {
            return Equals(obj as MyVoDecimal);
        }

        public static global::System.Boolean operator ==(MyVoDecimal left, MyVoDecimal right) => Equals(left, right);
        public static global::System.Boolean operator !=(MyVoDecimal left, MyVoDecimal right) => !Equals(left, right);
        public static global::System.Boolean operator ==(MyVoDecimal left, System.Decimal right) => left?.Value.Equals(right) ?? false;
        public static global::System.Boolean operator !=(MyVoDecimal left, System.Decimal right) => !(left == right);
        public static global::System.Boolean operator ==(System.Decimal left, MyVoDecimal right) => right?.Value.Equals(left) ?? false;
        public static global::System.Boolean operator !=(System.Decimal left, MyVoDecimal right) => !(left == right);
        public static explicit operator MyVoDecimal(System.Decimal value) => From(value);
        public static explicit operator System.Decimal(MyVoDecimal value) => value.Value;
        public int CompareTo(MyVoDecimal other) => Value.CompareTo(other.Value);
        public int CompareTo(object other)
        {
            if (other is null)
                return 1;
            if (other is MyVoDecimal x)
                return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type MyVoDecimal", nameof(other));
        }

        /// <inheritdoc cref = "decimal.TryParse(System.ReadOnlySpan{byte}, out decimal)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDecimal result)
        {
            if (System.Decimal.TryParse(utf8Text, out var __v))
            {
                result = new MyVoDecimal(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "decimal.TryParse(System.ReadOnlySpan{byte}, System.Globalization.NumberStyles, System.IFormatProvider? , out decimal)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDecimal result)
        {
            if (System.Decimal.TryParse(utf8Text, style, provider, out var __v))
            {
                result = new MyVoDecimal(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "decimal.TryParse(System.ReadOnlySpan{byte}, System.IFormatProvider? , out decimal)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDecimal result)
        {
            if (System.Decimal.TryParse(utf8Text, provider, out var __v))
            {
                result = new MyVoDecimal(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "decimal.TryParse(System.ReadOnlySpan{char}, out decimal)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDecimal result)
        {
            if (System.Decimal.TryParse(s, out var __v))
            {
                result = new MyVoDecimal(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "decimal.TryParse(System.ReadOnlySpan{char}, System.Globalization.NumberStyles, System.IFormatProvider? , out decimal)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDecimal result)
        {
            if (System.Decimal.TryParse(s, style, provider, out var __v))
            {
                result = new MyVoDecimal(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "decimal.TryParse(System.ReadOnlySpan{char}, System.IFormatProvider? , out decimal)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDecimal result)
        {
            if (System.Decimal.TryParse(s, provider, out var __v))
            {
                result = new MyVoDecimal(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "decimal.TryParse(string? , out decimal)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string s,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDecimal result)
        {
            if (System.Decimal.TryParse(s, out var __v))
            {
                result = new MyVoDecimal(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "decimal.TryParse(string? , System.Globalization.NumberStyles, System.IFormatProvider? , out decimal)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDecimal result)
        {
            if (System.Decimal.TryParse(s, style, provider, out var __v))
            {
                result = new MyVoDecimal(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "decimal.TryParse(string? , System.IFormatProvider? , out decimal)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string s, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDecimal result)
        {
            if (System.Decimal.TryParse(s, provider, out var __v))
            {
                result = new MyVoDecimal(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "decimal.Parse(System.ReadOnlySpan{byte}, System.Globalization.NumberStyles, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoDecimal Parse(global::System.ReadOnlySpan<byte> utf8Text, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider)
        {
            var r = System.Decimal.Parse(utf8Text, style, provider);
            return From(r);
        }

        /// <inheritdoc cref = "decimal.Parse(System.ReadOnlySpan{byte}, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoDecimal Parse(global::System.ReadOnlySpan<byte> utf8Text, global::System.IFormatProvider provider)
        {
            var r = System.Decimal.Parse(utf8Text, provider);
            return From(r);
        }

        /// <inheritdoc cref = "decimal.Parse(System.ReadOnlySpan{char}, System.Globalization.NumberStyles, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoDecimal Parse(global::System.ReadOnlySpan<char> s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider)
        {
            var r = System.Decimal.Parse(s, style, provider);
            return From(r);
        }

        /// <inheritdoc cref = "decimal.Parse(System.ReadOnlySpan{char}, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoDecimal Parse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider provider)
        {
            var r = System.Decimal.Parse(s, provider);
            return From(r);
        }

        /// <inheritdoc cref = "decimal.Parse(string)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoDecimal Parse(string s)
        {
            var r = System.Decimal.Parse(s);
            return From(r);
        }

        /// <inheritdoc cref = "decimal.Parse(string, System.Globalization.NumberStyles)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoDecimal Parse(string s, global::System.Globalization.NumberStyles style)
        {
            var r = System.Decimal.Parse(s, style);
            return From(r);
        }

        /// <inheritdoc cref = "decimal.Parse(string, System.Globalization.NumberStyles, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoDecimal Parse(string s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider)
        {
            var r = System.Decimal.Parse(s, style, provider);
            return From(r);
        }

        /// <inheritdoc cref = "decimal.Parse(string, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoDecimal Parse(string s, global::System.IFormatProvider provider)
        {
            var r = System.Decimal.Parse(s, provider);
            return From(r);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32)2166136261;
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<System.Decimal>.Default.GetHashCode(Value);
                return hash;
            }
        }

        private void EnsureInitialized()
        {
            if (!IsInitialized())
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif
                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        /// <summary>Returns the string representation of the underlying <see cref = "System.Decimal"/>.</summary>
        public override global::System.String ToString() => IsInitialized() ? Value.ToString() : "[UNINITIALIZED]";
        /// <summary>
        /// Converts a MyVoDecimal to or from JSON.
        /// </summary>
        public class MyVoDecimalSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<MyVoDecimal>
        {
            public override MyVoDecimal Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
#if NET5_0_OR_GREATER
                return MyVoDecimal.__Deserialize(global::System.Text.Json.JsonSerializer.Deserialize(ref reader, (global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::System.Decimal>)options.GetTypeInfo(typeof(global::System.Decimal))));
#else
                return MyVoDecimal.__Deserialize(reader.GetDecimal());
#endif
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, MyVoDecimal value, global::System.Text.Json.JsonSerializerOptions options)
            {
#if NET5_0_OR_GREATER
                global::System.Text.Json.JsonSerializer.Serialize(writer, value.Value, options);
#else
                writer.WriteNumberValue(value.Value);
#endif
            }
#if NET6_0_OR_GREATER
            public override MyVoDecimal ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return MyVoDecimal.__Deserialize(global::System.Decimal.Parse(reader.GetString(), global::System.Globalization.NumberStyles.Any, global::System.Globalization.CultureInfo.InvariantCulture));
            }

            public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, MyVoDecimal value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WritePropertyName(value.Value.ToString(global::System.Globalization.CultureInfo.InvariantCulture));
            }
#endif
        }

        class MyVoDecimalTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Decimal) || sourceType == typeof(global::System.String) || base.CanConvertFrom(context, sourceType);
            }

            public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value)
            {
                return value switch
                {
                    global::System.Decimal decimalValue => MyVoDecimal.__Deserialize(decimalValue),
                    global::System.String stringValue when !global::System.String.IsNullOrEmpty(stringValue) && global::System.Decimal.TryParse(stringValue, global::System.Globalization.NumberStyles.Number, culture.NumberFormat, out var result) => MyVoDecimal.__Deserialize(result),
                    _ => base.ConvertFrom(context, culture, value),
                };
            }

            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Decimal) || sourceType == typeof(global::System.String) || base.CanConvertTo(context, sourceType);
            }

            public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, System.Type destinationType)
            {
                if (value is MyVoDecimal idValue)
                {
                    if (destinationType == typeof(global::System.Decimal))
                    {
                        return idValue.Value;
                    }

                    if (destinationType == typeof(global::System.String))
                    {
                        return idValue.Value.ToString(culture);
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }

        internal sealed class MyVoDecimalDebugView
        {
            private readonly MyVoDecimal _t;
            MyVoDecimalDebugView(MyVoDecimal t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.Decimal";
            public System.Decimal Value => _t.Value;
            public global::System.String Conversions => @"[global::System.Text.Json.Serialization.JsonConverter(typeof(MyVoDecimalSystemTextJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(MyVoDecimalTypeConverter))]
";
        }
    }
}
  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618
// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036
// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097
// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669
// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591
using Vogen;

namespace @double
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(MyVoDoubleSystemTextJsonConverter))]
    [global::System.ComponentModel.TypeConverter(typeof(MyVoDoubleTypeConverter))]
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(MyVoDoubleDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.Double, Value = { _value }")]
    public partial class MyVoDouble : global::System.IEquatable<MyVoDouble>, global::System.IEquatable<System.Double>, global::System.IComparable<MyVoDouble>, global::System.IComparable, global::System.IParsable<MyVoDouble>, global::System.ISpanParsable<MyVoDouble>, global::System.IUtf8SpanParsable<MyVoDouble>
    {
#if DEBUG
private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
#if !VOGEN_NO_VALIDATION
        private readonly global::System.Boolean _isInitialized;
#endif
        private readonly System.Double _value;
        /// <summary>
        /// Gets the underlying <see cref = "System.Double"/> value if set, otherwise a <see cref = "global::Vogen.ValueObjectValidationException"/> is thrown.
        /// </summary>
        public System.Double Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public MyVoDouble()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
#if !VOGEN_NO_VALIDATION
            _isInitialized = false;
#endif
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private MyVoDouble(System.Double value)
        {
            _value = value;
#if !VOGEN_NO_VALIDATION
            _isInitialized = true;
#endif
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static MyVoDouble From(System.Double value)
        {
            MyVoDouble instance = new MyVoDouble(value);
            return instance;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying type.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, false will be returned.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <param name = "vo">An instance of the value object.</param>
        /// <returns>True if the value object can be built, otherwise false.</returns>
        public static bool TryFrom(System.Double value,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDouble vo)
        {
            vo = new MyVoDouble(value);
            return true;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying value.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, an error will be returned.
        /// </summary>
        /// <param name = "value">The primitive value.</param>
        /// <returns>A <see cref = "ValueObjectOrError{T}"/> containing either the value object, or an error.</returns>
        public static ValueObjectOrError<MyVoDouble> TryFrom(System.Double value)
        {
            return new ValueObjectOrError<MyVoDouble>(new MyVoDouble(value));
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
#if VOGEN_NO_VALIDATION
  public bool IsInitialized() => true;
#else
        public bool IsInitialized() => _isInitialized;
#endif
        // only called internally when something has been deserialized into
        // its primitive type.
        private static MyVoDouble __Deserialize(System.Double value)
        {
            return new MyVoDouble(value);
        }

        public global::System.Boolean Equals(MyVoDouble other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if (!IsInitialized() || !other.IsInitialized())
                return false;
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<System.Double>.Default.Equals(Value, other.Value);
        }

        public global::System.Boolean Equals(MyVoDouble other, global::System.Collections.Generic.IEqualityComparer<MyVoDouble> comparer)
        {
            return comparer.Equals(this, other);
        }

        public global::System.Boolean Equals(System.Double primitive)
        {
            return Value.Equals(primitive);
        }

        public override global::System.Boolean Equals(global::System.Object obj)
        {
            return Equals(obj as MyVoDouble);
        }

        public static global::System.Boolean operator ==(MyVoDouble left, MyVoDouble right) => Equals(left, right);
        public static global::System.Boolean operator !=(MyVoDouble left, MyVoDouble right) => !Equals(left, right);
        public static global::System.Boolean operator ==(MyVoDouble left, System.Double right) => left?.Value.Equals(right) ?? false;
        public static global::System.Boolean operator !=(MyVoDouble left, System.Double right) => !(left == right);
        public static global::System.Boolean operator ==(System.Double left, MyVoDouble right) => right?.Value.Equals(left) ?? false;
        public static global::System.Boolean operator !=(System.Double left, MyVoDouble right) => !(left == right);
        public static explicit operator MyVoDouble(System.Double value) => From(value);
        public static explicit operator System.Double(MyVoDouble value) => value.Value;
        public int CompareTo(MyVoDouble other) => Value.CompareTo(other.Value);
        public int CompareTo(object other)
        {
            if (other is null)
                return 1;
            if (other is MyVoDouble x)
                return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type MyVoDouble", nameof(other));
        }

        /// <inheritdoc cref = "double.TryParse(System.ReadOnlySpan{byte}, out double)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDouble result)
        {
            if (System.Double.TryParse(utf8Text, out var __v))
            {
                result = new MyVoDouble(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "double.TryParse(System.ReadOnlySpan{byte}, System.Globalization.NumberStyles, System.IFormatProvider? , out double)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDouble result)
        {
            if (System.Double.TryParse(utf8Text, style, provider, out var __v))
            {
                result = new MyVoDouble(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "double.TryParse(System.ReadOnlySpan{byte}, System.IFormatProvider? , out double)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDouble result)
        {
            if (System.Double.TryParse(utf8Text, provider, out var __v))
            {
                result = new MyVoDouble(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "double.TryParse(System.ReadOnlySpan{char}, out double)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDouble result)
        {
            if (System.Double.TryParse(s, out var __v))
            {
                result = new MyVoDouble(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "double.TryParse(System.ReadOnlySpan{char}, System.Globalization.NumberStyles, System.IFormatProvider? , out double)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDouble result)
        {
            if (System.Double.TryParse(s, style, provider, out var __v))
            {
                result = new MyVoDouble(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "double.TryParse(System.ReadOnlySpan{char}, System.IFormatProvider? , out double)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDouble result)
        {
            if (System.Double.TryParse(s, provider, out var __v))
            {
                result = new MyVoDouble(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "double.TryParse(string? , out double)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string s,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDouble result)
        {
            if (System.Double.TryParse(s, out var __v))
            {
                result = new MyVoDouble(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "double.TryParse(string? , System.Globalization.NumberStyles, System.IFormatProvider? , out double)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDouble result)
        {
            if (System.Double.TryParse(s, style, provider, out var __v))
            {
                result = new MyVoDouble(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "double.TryParse(string? , System.IFormatProvider? , out double)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string s, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoDouble result)
        {
            if (System.Double.TryParse(s, provider, out var __v))
            {
                result = new MyVoDouble(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "double.Parse(System.ReadOnlySpan{byte}, System.Globalization.NumberStyles, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoDouble Parse(global::System.ReadOnlySpan<byte> utf8Text, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider)
        {
            var r = System.Double.Parse(utf8Text, style, provider);
            return From(r);
        }

        /// <inheritdoc cref = "double.Parse(System.ReadOnlySpan{byte}, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoDouble Parse(global::System.ReadOnlySpan<byte> utf8Text, global::System.IFormatProvider provider)
        {
            var r = System.Double.Parse(utf8Text, provider);
            return From(r);
        }

        /// <inheritdoc cref = "double.Parse(System.ReadOnlySpan{char}, System.Globalization.NumberStyles, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoDouble Parse(global::System.ReadOnlySpan<char> s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider)
        {
            var r = System.Double.Parse(s, style, provider);
            return From(r);
        }

        /// <inheritdoc cref = "double.Parse(System.ReadOnlySpan{char}, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoDouble Parse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider provider)
        {
            var r = System.Double.Parse(s, provider);
            return From(r);
        }

        /// <inheritdoc cref = "double.Parse(string)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoDouble Parse(string s)
        {
            var r = System.Double.Parse(s);
            return From(r);
        }

        /// <inheritdoc cref = "double.Parse(string, System.Globalization.NumberStyles)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoDouble Parse(string s, global::System.Globalization.NumberStyles style)
        {
            var r = System.Double.Parse(s, style);
            return From(r);
        }

        /// <inheritdoc cref = "double.Parse(string, System.Globalization.NumberStyles, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoDouble Parse(string s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider)
        {
            var r = System.Double.Parse(s, style, provider);
            return From(r);
        }

        /// <inheritdoc cref = "double.Parse(string, System.IFormatProvider? )"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoDouble Parse(string s, global::System.IFormatProvider provider)
        {
            var r = System.Double.Parse(s, provider);
            return From(r);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32)2166136261;
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<System.Double>.Default.GetHashCode(Value);
                return hash;
            }
        }

        private void EnsureInitialized()
        {
            if (!IsInitialized())
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif
                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        /// <summary>Returns the string representation of the underlying <see cref = "System.Double"/>.</summary>
        public override global::System.String ToString() => IsInitialized() ? Value.ToString() : "[UNINITIALIZED]";
        /// <summary>
        /// Converts a MyVoDouble to or from JSON.
        /// </summary>
        public class MyVoDoubleSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<MyVoDouble>
        {
            public override MyVoDouble Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
#if NET5_0_OR_GREATER
                return MyVoDouble.__Deserialize(global::System.Text.Json.JsonSerializer.Deserialize(ref reader, (global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::System.Double>)options.GetTypeInfo(typeof(global::System.Double))));
#else
                return MyVoDouble.__Deserialize(reader.GetDouble());
#endif
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, MyVoDouble value, global::System.Text.Json.JsonSerializerOptions options)
            {
#if NET5_0_OR_GREATER
                global::System.Text.Json.JsonSerializer.Serialize(writer, value.Value, options);
#else
                writer.WriteNumberValue(value.Value);
#endif
            }
#if NET6_0_OR_GREATER
            public override MyVoDouble ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return MyVoDouble.__Deserialize(global::System.Double.Parse(reader.GetString(), global::System.Globalization.NumberStyles.Any, global::System.Globalization.CultureInfo.InvariantCulture));
            }

            public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, MyVoDouble value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WritePropertyName(value.Value.ToString(global::System.Globalization.CultureInfo.InvariantCulture));
            }
#endif
        }

        class MyVoDoubleTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Double) || sourceType == typeof(global::System.String) || base.CanConvertFrom(context, sourceType);
            }

            public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value)
            {
                return value switch
                {
                    global::System.Double doubleValue => MyVoDouble.__Deserialize(doubleValue),
                    global::System.Int64 longValue => MyVoDouble.__Deserialize((global::System.Double)longValue),
                    global::System.String stringValue when !global::System.String.IsNullOrEmpty(stringValue) && global::System.Double.TryParse(stringValue, global::System.Globalization.NumberStyles.Float | global::System.Globalization.NumberStyles.AllowThousands, culture.NumberFormat, out var result) => MyVoDouble.__Deserialize(result),
                    _ => base.ConvertFrom(context, culture, value),
                };
            }

            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Double) || sourceType == typeof(global::System.String) || base.CanConvertTo(context, sourceType);
            }

            public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, global::System.Type destinationType)
            {
                if (value is MyVoDouble idValue)
                {
                    if (destinationType == typeof(global::System.Double))
                    {
                        return idValue.Value;
                    }

                    if (destinationType == typeof(global::System.String))
                    {
                        return idValue.Value.ToString(culture);
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }

        internal sealed class MyVoDoubleDebugView
        {
            private readonly MyVoDouble _t;
            MyVoDoubleDebugView(MyVoDouble t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.Double";
            public System.Double Value => _t.Value;
            public global::System.String Conversions => @"[global::System.Text.Json.Serialization.JsonConverter(typeof(MyVoDoubleSystemTextJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(MyVoDoubleTypeConverter))]
";
        }
    }
}
  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618
// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036
// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097
// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669
// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591
using Vogen;

namespace @double
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(MyVoStringSystemTextJsonConverter))]
    [global::System.ComponentModel.TypeConverter(typeof(MyVoStringTypeConverter))]
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(MyVoStringDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.String, Value = { _value }")]
    public partial class MyVoString : global::System.IEquatable<MyVoString>, global::System.IEquatable<System.String>, global::System.IComparable<MyVoString>, global::System.IComparable, global::System.IParsable<MyVoString>
    {
#if DEBUG
private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
#if !VOGEN_NO_VALIDATION
        private readonly global::System.Boolean _isInitialized;
#endif
        private readonly System.String _value;
        /// <summary>
        /// Gets the underlying <see cref = "System.String"/> value if set, otherwise a <see cref = "global::Vogen.ValueObjectValidationException"/> is thrown.
        /// </summary>
        public System.String Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public MyVoString()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
#if !VOGEN_NO_VALIDATION
            _isInitialized = false;
#endif
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private MyVoString(System.String value)
        {
            _value = value;
#if !VOGEN_NO_VALIDATION
            _isInitialized = true;
#endif
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static MyVoString From(System.String value)
        {
            if (value is null)
            {
                throw new global::Vogen.ValueObjectValidationException("Cannot create a value object with null.");
            }

            MyVoString instance = new MyVoString(value);
            return instance;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying type.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, false will be returned.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <param name = "vo">An instance of the value object.</param>
        /// <returns>True if the value object can be built, otherwise false.</returns>
        public static bool TryFrom(System.String value,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoString vo)
        {
            if (value is null)
            {
                vo = default;
                return false;
            }

            vo = new MyVoString(value);
            return true;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying value.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, an error will be returned.
        /// </summary>
        /// <param name = "value">The primitive value.</param>
        /// <returns>A <see cref = "ValueObjectOrError{T}"/> containing either the value object, or an error.</returns>
        public static ValueObjectOrError<MyVoString> TryFrom(System.String value)
        {
            if (value is null)
            {
                return new ValueObjectOrError<MyVoString>(Validation.Invalid("The value provided was null"));
            }

            return new ValueObjectOrError<MyVoString>(new MyVoString(value));
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
#if VOGEN_NO_VALIDATION
  public bool IsInitialized() => true;
#else
        public bool IsInitialized() => _isInitialized;
#endif
        // only called internally when something has been deserialized into
        // its primitive type.
        private static MyVoString __Deserialize(System.String value)
        {
            if (value is null)
            {
                throw new global::Vogen.ValueObjectValidationException("Cannot create a value object with null.");
            }

            return new MyVoString(value);
        }

        public global::System.Boolean Equals(MyVoString other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if (!IsInitialized() || !other.IsInitialized())
                return false;
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(Value, other.Value);
        }

        public global::System.Boolean Equals(MyVoString other, global::System.Collections.Generic.IEqualityComparer<MyVoString> comparer)
        {
            return comparer.Equals(this, other);
        }

        public global::System.Boolean Equals(System.String primitive)
        {
            return Value.Equals(primitive);
        }

        public global::System.Boolean Equals(System.String primitive, global::System.StringComparer comparer)
        {
            return comparer.Equals(Value, primitive);
        }

        public override global::System.Boolean Equals(global::System.Object obj)
        {
            return Equals(obj as MyVoString);
        }

        public static global::System.Boolean operator ==(MyVoString left, MyVoString right) => Equals(left, right);
        public static global::System.Boolean operator !=(MyVoString left, MyVoString right) => !Equals(left, right);
        public static global::System.Boolean operator ==(MyVoString left, System.String right) => left?.Value.Equals(right) ?? false;
        public static global::System.Boolean operator !=(MyVoString left, System.String right) => !(left == right);
        public static global::System.Boolean operator ==(System.String left, MyVoString right) => right?.Value.Equals(left) ?? false;
        public static global::System.Boolean operator !=(System.String left, MyVoString right) => !(left == right);
        public static explicit operator MyVoString(System.String value) => From(value);
        public static explicit operator System.String(MyVoString value) => value.Value;
        public int CompareTo(MyVoString other) => Value.CompareTo(other.Value);
        public int CompareTo(object other)
        {
            if (other is null)
                return 1;
            if (other is MyVoString x)
                return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type MyVoString", nameof(other));
        }

        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.String s, global::System.IFormatProvider provider,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoString result)
        {
            result = new MyVoString(s);
            return true;
        }

        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created via the <see cref = "From(global::System.String)"/> method.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoString Parse(global::System.String s, global::System.IFormatProvider provider)
        {
            return From(s);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32)2166136261;
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<System.String>.Default.GetHashCode(Value);
                return hash;
            }
        }

        private void EnsureInitialized()
        {
            if (!IsInitialized())
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif
                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        /// <summary>Returns the string representation of the underlying <see cref = "System.String"/>.</summary>
        public override global::System.String ToString() => IsInitialized() ? Value.ToString() : "[UNINITIALIZED]";
        /// <summary>
        /// Converts a MyVoString to or from JSON.
        /// </summary>
        public class MyVoStringSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<MyVoString>
        {
            public override MyVoString Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return MyVoString.__Deserialize(reader.GetString());
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, MyVoString value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteStringValue(value.Value);
            }
#if NET6_0_OR_GREATER
            public override MyVoString ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return MyVoString.__Deserialize(reader.GetString());
            }

            public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, MyVoString value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WritePropertyName(value.Value);
            }
#endif
        }

        class MyVoStringTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.String) || base.CanConvertFrom(context, sourceType);
            }

            public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value)
            {
                var stringValue = value as global::System.String;
                if (stringValue is not null)
                {
                    return MyVoString.__Deserialize(stringValue);
                }

                return base.ConvertFrom(context, culture, value);
            }

            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.String) || base.CanConvertTo(context, sourceType);
            }

            public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, global::System.Type destinationType)
            {
                if (value is MyVoString idValue)
                {
                    if (destinationType == typeof(global::System.String))
                    {
                        return idValue.Value;
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }

        internal sealed class MyVoStringDebugView
        {
            private readonly MyVoString _t;
            MyVoStringDebugView(MyVoString t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.String";
            public System.String Value => _t.Value;
            public global::System.String Conversions => @"[global::System.Text.Json.Serialization.JsonConverter(typeof(MyVoStringSystemTextJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(MyVoStringTypeConverter))]
";
        }
    }
}
  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618
// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036
// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097
// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669
// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591
using Vogen;

namespace @double
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(MyVoBoolSystemTextJsonConverter))]
    [global::System.ComponentModel.TypeConverter(typeof(MyVoBoolTypeConverter))]
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(MyVoBoolDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.Boolean, Value = { _value }")]
    public partial class MyVoBool : global::System.IEquatable<MyVoBool>, global::System.IEquatable<System.Boolean>, global::System.IComparable<MyVoBool>, global::System.IComparable
    {
#if DEBUG
private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
#if !VOGEN_NO_VALIDATION
        private readonly global::System.Boolean _isInitialized;
#endif
        private readonly System.Boolean _value;
        /// <summary>
        /// Gets the underlying <see cref = "System.Boolean"/> value if set, otherwise a <see cref = "global::Vogen.ValueObjectValidationException"/> is thrown.
        /// </summary>
        public System.Boolean Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public MyVoBool()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
#if !VOGEN_NO_VALIDATION
            _isInitialized = false;
#endif
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private MyVoBool(System.Boolean value)
        {
            _value = value;
#if !VOGEN_NO_VALIDATION
            _isInitialized = true;
#endif
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static MyVoBool From(System.Boolean value)
        {
            MyVoBool instance = new MyVoBool(value);
            return instance;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying type.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, false will be returned.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <param name = "vo">An instance of the value object.</param>
        /// <returns>True if the value object can be built, otherwise false.</returns>
        public static bool TryFrom(System.Boolean value,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoBool vo)
        {
            vo = new MyVoBool(value);
            return true;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying value.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, an error will be returned.
        /// </summary>
        /// <param name = "value">The primitive value.</param>
        /// <returns>A <see cref = "ValueObjectOrError{T}"/> containing either the value object, or an error.</returns>
        public static ValueObjectOrError<MyVoBool> TryFrom(System.Boolean value)
        {
            return new ValueObjectOrError<MyVoBool>(new MyVoBool(value));
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
#if VOGEN_NO_VALIDATION
  public bool IsInitialized() => true;
#else
        public bool IsInitialized() => _isInitialized;
#endif
        // only called internally when something has been deserialized into
        // its primitive type.
        private static MyVoBool __Deserialize(System.Boolean value)
        {
            return new MyVoBool(value);
        }

        public global::System.Boolean Equals(MyVoBool other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if (!IsInitialized() || !other.IsInitialized())
                return false;
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(Value, other.Value);
        }

        public global::System.Boolean Equals(MyVoBool other, global::System.Collections.Generic.IEqualityComparer<MyVoBool> comparer)
        {
            return comparer.Equals(this, other);
        }

        public global::System.Boolean Equals(System.Boolean primitive)
        {
            return Value.Equals(primitive);
        }

        public override global::System.Boolean Equals(global::System.Object obj)
        {
            return Equals(obj as MyVoBool);
        }

        public static global::System.Boolean operator ==(MyVoBool left, MyVoBool right) => Equals(left, right);
        public static global::System.Boolean operator !=(MyVoBool left, MyVoBool right) => !Equals(left, right);
        public static global::System.Boolean operator ==(MyVoBool left, System.Boolean right) => left?.Value.Equals(right) ?? false;
        public static global::System.Boolean operator !=(MyVoBool left, System.Boolean right) => !(left == right);
        public static global::System.Boolean operator ==(System.Boolean left, MyVoBool right) => right?.Value.Equals(left) ?? false;
        public static global::System.Boolean operator !=(System.Boolean left, MyVoBool right) => !(left == right);
        public static explicit operator MyVoBool(System.Boolean value) => From(value);
        public static explicit operator System.Boolean(MyVoBool value) => value.Value;
        public int CompareTo(MyVoBool other) => Value.CompareTo(other.Value);
        public int CompareTo(object other)
        {
            if (other is null)
                return 1;
            if (other is MyVoBool x)
                return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type MyVoBool", nameof(other));
        }

        /// <inheritdoc cref = "bool.TryParse(System.ReadOnlySpan{char}, out bool)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> value,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoBool result)
        {
            if (System.Boolean.TryParse(value, out var __v))
            {
                result = new MyVoBool(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "bool.TryParse(string? , out bool)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string value,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out MyVoBool result)
        {
            if (System.Boolean.TryParse(value, out var __v))
            {
                result = new MyVoBool(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "bool.Parse(System.ReadOnlySpan{char})"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoBool Parse(global::System.ReadOnlySpan<char> value)
        {
            var r = System.Boolean.Parse(value);
            return From(r);
        }

        /// <inheritdoc cref = "bool.Parse(string)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static MyVoBool Parse(string value)
        {
            var r = System.Boolean.Parse(value);
            return From(r);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32)2166136261;
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<System.Boolean>.Default.GetHashCode(Value);
                return hash;
            }
        }

        private void EnsureInitialized()
        {
            if (!IsInitialized())
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif
                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        /// <summary>Returns the string representation of the underlying <see cref = "System.Boolean"/>.</summary>
        public override global::System.String ToString() => IsInitialized() ? Value.ToString() : "[UNINITIALIZED]";
        /// <summary>
        /// Converts a MyVoBool to or from JSON.
        /// </summary>
        public class MyVoBoolSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<MyVoBool>
        {
            public override MyVoBool Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return MyVoBool.__Deserialize(reader.GetBoolean());
            }

            public override void Write(global::System.Text.Json.Utf8JsonWriter writer, MyVoBool value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteBooleanValue(value.Value);
            }
#if NET6_0_OR_GREATER
            public override MyVoBool ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return MyVoBool.__Deserialize(bool.Parse(reader.GetString()));
            }

            public override void WriteAsPropertyName(global::System.Text.Json.Utf8JsonWriter writer, MyVoBool value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WritePropertyName(value.Value.ToString());
            }
#endif
        }

        class MyVoBoolTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Boolean) || sourceType == typeof(global::System.String) || base.CanConvertFrom(context, sourceType);
            }

            public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value)
            {
                return value switch
                {
                    global::System.Boolean boolValue => MyVoBool.__Deserialize(boolValue),
                    global::System.String stringValue when !global::System.String.IsNullOrEmpty(stringValue) && global::System.Boolean.TryParse(stringValue, out var result) => MyVoBool.__Deserialize(result),
                    _ => base.ConvertFrom(context, culture, value),
                };
            }

            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Boolean) || sourceType == typeof(global::System.String) || base.CanConvertTo(context, sourceType);
            }

            public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, global::System.Type destinationType)
            {
                if (value is MyVoBool idValue)
                {
                    if (destinationType == typeof(global::System.Boolean))
                    {
                        return idValue.Value;
                    }

                    if (destinationType == typeof(global::System.String))
                    {
                        return idValue.Value.ToString();
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }

        internal sealed class MyVoBoolDebugView
        {
            private readonly MyVoBool _t;
            MyVoBoolDebugView(MyVoBool t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.Boolean";
            public System.Boolean Value => _t.Value;
            public global::System.String Conversions => @"[global::System.Text.Json.Serialization.JsonConverter(typeof(MyVoBoolSystemTextJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(MyVoBoolTypeConverter))]
";
        }
    }
}
  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618
// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036
// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097
// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669
// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591
using Vogen;

namespace @double
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(@boolSystemTextJsonConverter))]
    [global::System.ComponentModel.TypeConverter(typeof(@boolTypeConverter))]
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(@boolDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.Boolean, Value = { _value }")]
    public partial class @bool : global::System.IEquatable<@bool>, global::System.IEquatable<System.Boolean>, global::System.IComparable<@bool>, global::System.IComparable
    {
#if DEBUG
private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
#if !VOGEN_NO_VALIDATION
        private readonly global::System.Boolean _isInitialized;
#endif
        private readonly System.Boolean _value;
        /// <summary>
        /// Gets the underlying <see cref = "System.Boolean"/> value if set, otherwise a <see cref = "global::Vogen.ValueObjectValidationException"/> is thrown.
        /// </summary>
        public System.Boolean Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public @bool()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
#if !VOGEN_NO_VALIDATION
            _isInitialized = false;
#endif
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private @bool(System.Boolean value)
        {
            _value = value;
#if !VOGEN_NO_VALIDATION
            _isInitialized = true;
#endif
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static @bool From(System.Boolean value)
        {
            @bool instance = new @bool(value);
            return instance;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying type.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, false will be returned.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <param name = "vo">An instance of the value object.</param>
        /// <returns>True if the value object can be built, otherwise false.</returns>
        public static bool TryFrom(System.Boolean value,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out @bool vo)
        {
            vo = new @bool(value);
            return true;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying value.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, an error will be returned.
        /// </summary>
        /// <param name = "value">The primitive value.</param>
        /// <returns>A <see cref = "ValueObjectOrError{T}"/> containing either the value object, or an error.</returns>
        public static ValueObjectOrError<@bool> TryFrom(System.Boolean value)
        {
            return new ValueObjectOrError<@bool>(new @bool(value));
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
#if VOGEN_NO_VALIDATION
  public bool IsInitialized() => true;
#else
        public bool IsInitialized() => _isInitialized;
#endif
        // only called internally when something has been deserialized into
        // its primitive type.
        private static @bool __Deserialize(System.Boolean value)
        {
            return new @bool(value);
        }

        public global::System.Boolean Equals(@bool other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if (!IsInitialized() || !other.IsInitialized())
                return false;
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(Value, other.Value);
        }

        public global::System.Boolean Equals(@bool other, global::System.Collections.Generic.IEqualityComparer<@bool> comparer)
        {
            return comparer.Equals(this, other);
        }

        public global::System.Boolean Equals(System.Boolean primitive)
        {
            return Value.Equals(primitive);
        }

        public override global::System.Boolean Equals(global::System.Object obj)
        {
            return Equals(obj as @bool);
        }

        public static global::System.Boolean operator ==(@bool left, @bool right) => Equals(left, right);
        public static global::System.Boolean operator !=(@bool left, @bool right) => !Equals(left, right);
        public static global::System.Boolean operator ==(@bool left, System.Boolean right) => left?.Value.Equals(right) ?? false;
        public static global::System.Boolean operator !=(@bool left, System.Boolean right) => !(left == right);
        public static global::System.Boolean operator ==(System.Boolean left, @bool right) => right?.Value.Equals(left) ?? false;
        public static global::System.Boolean operator !=(System.Boolean left, @bool right) => !(left == right);
        public static explicit operator @bool(System.Boolean value) => From(value);
        public static explicit operator System.Boolean(@bool value) => value.Value;
        public int CompareTo(@bool other) => Value.CompareTo(other.Value);
        public int CompareTo(object other)
        {
            if (other is null)
                return 1;
            if (other is @bool x)
                return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type @bool", nameof(other));
        }

        /// <inheritdoc cref = "bool.TryParse(System.ReadOnlySpan{char}, out bool)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> value,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out @bool result)
        {
            if (System.Boolean.TryParse(value, out var __v))
            {
                result = new @bool(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "bool.TryParse(string? , out bool)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
        /// </returns>
        public static global::System.Boolean TryParse(string value,
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out @bool result)
        {
            if (System.Boolean.TryParse(value, out var __v))
            {
                result = new @bool(__v);
                return true;
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "bool.Parse(System.ReadOnlySpan{char})"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static @bool Parse(global::System.ReadOnlySpan<char> value)
        {
            var r = System.Boolean.Parse(value);
            return From(r);
        }

        /// <inheritdoc cref = "bool.Parse(string)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created by calling the Parse method on the primitive.
        /// </returns>
        /// <exception cref = "global::Vogen.ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
        public static @bool Parse(string value)
        {
            var r = System.Boolean.Parse(value);
            return From(r);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32)2166136261;
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<System.Boolean>.Default.GetHashCode(Value);
                return hash;
            }
        }

        private void EnsureInitialized()
        {
            if (!IsInitialized())
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif
                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        /// <summary>Returns the string representation of the underlying <see cref = "System.Boolean"/>.</summary>
        public override global::System.String ToString() => IsInitialized() ? Value.ToString() : "[UNINITIALIZED]";
        /// <summary>
        /// Converts a @bool to or from JSON.
        /// </summary>
        public class @boolSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<@bool>
        {
            public override @bool Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return @bool.__Deserialize(reader.GetBoolean());
            }

            public override void Write(global::System.Text.Json.Utf8JsonWriter writer, @bool value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteBooleanValue(value.Value);
            }
#if NET6_0_OR_GREATER
            public override @bool ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return @bool.__Deserialize(bool.Parse(reader.GetString()));
            }

            public override void WriteAsPropertyName(global::System.Text.Json.Utf8JsonWriter writer, @bool value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WritePropertyName(value.Value.ToString());
            }
#endif
        }

        class @boolTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Boolean) || sourceType == typeof(global::System.String) || base.CanConvertFrom(context, sourceType);
            }

            public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value)
            {
                return value switch
                {
                    global::System.Boolean boolValue => @bool.__Deserialize(boolValue),
                    global::System.String stringValue when !global::System.String.IsNullOrEmpty(stringValue) && global::System.Boolean.TryParse(stringValue, out var result) => @bool.__Deserialize(result),
                    _ => base.ConvertFrom(context, culture, value),
                };
            }

            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Boolean) || sourceType == typeof(global::System.String) || base.CanConvertTo(context, sourceType);
            }

            public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, global::System.Type destinationType)
            {
                if (value is @bool idValue)
                {
                    if (destinationType == typeof(global::System.Boolean))
                    {
                        return idValue.Value;
                    }

                    if (destinationType == typeof(global::System.String))
                    {
                        return idValue.Value.ToString();
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }

        internal sealed class @boolDebugView
        {
            private readonly @bool _t;
            @boolDebugView(@bool t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.Boolean";
            public System.Boolean Value => _t.Value;
            public global::System.String Conversions => @"[global::System.Text.Json.Serialization.JsonConverter(typeof(@boolSystemTextJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(@boolTypeConverter))]
";
        }
    }
}
]