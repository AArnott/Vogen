using System;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using Vogen.Diagnostics;
using Vogen.Generators;

namespace Vogen;

internal static class WriteWorkItems
{
    private static readonly ClassGeneratorForReferenceType _classGeneratorForReferenceType;
    private static readonly ClassGeneratorForValueType _classGeneratorForValueType;
    private static readonly StructGeneratorForValueAndReferenceTypes _structGeneratorForValueAndReferenceTypes;

    public static readonly string GeneratedPreamble = @"// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
".Replace("\r\n", "\n").Replace("\n", Environment.NewLine); // normalize regardless of git checkout policy        

    static WriteWorkItems()
    {
        _classGeneratorForReferenceType = new ClassGeneratorForReferenceType();
        _classGeneratorForValueType = new ClassGeneratorForValueType();
        _structGeneratorForValueAndReferenceTypes = new StructGeneratorForValueAndReferenceTypes();
    }

    public static void WriteVo(VoWorkItem item, Compilation compilation, SourceProductionContext context,
        DiagnosticCollection diagnostics)
    {
        // get the recorded user class
        TypeDeclarationSyntax voClass = item.TypeToAugment;

        IGenerateSourceCode generator = GetGenerator(item);

        string classAsText = GeneratedPreamble + Environment.NewLine + generator.BuildClass(item, voClass);

        SourceText sourceText = SourceText.From(classAsText, Encoding.UTF8);

        string filename = $"{item.FullNamespace}_{voClass.Identifier}.g.cs";

        context.AddSource(filename, sourceText);
    }

    private static IGenerateSourceCode GetGenerator(VoWorkItem item) =>
        item.TypeToAugment switch
        {
            ClassDeclarationSyntax when item.IsValueType => _classGeneratorForValueType,
            ClassDeclarationSyntax => _classGeneratorForReferenceType,
            StructDeclarationSyntax => _structGeneratorForValueAndReferenceTypes,
            _ => throw new InvalidOperationException("Don't know how to get the generator!")
        };
}